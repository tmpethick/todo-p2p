(function(modules, entryId$$) {
             var require = (function () {
  require.__byId = __byId;
  return require;

  function require(name) {
    var scope$$ = window.__livereactload$$;
    var myId = arguments.length > 1 ? arguments[arguments.length - 1] : null;
    return __byId(moduleKey(scope$$, myId, name), false);
  }

  function __byId(id, isReload) {
    var oldRequire = typeof window.require === "function" ? window.require : null;
    var scope$$ = window.__livereactload$$;
    var _module = findModule(scope$$, id);

    if (_module) {
      scope$$.exports[_module.id] = !isReload ? scope$$.exports[_module.id] || {} : {};
      var _exports2 = scope$$.exports[_module.id];
      var mod = {
        exports: _exports2,
        onReload: function onReload(fn) {
          scope$$.reloaders[_module.file] = fn;
        }
      };
      // TODO: there should be still one argument to pass.. figure out which is it
      var oldReloader = scope$$.reloaders[_module.file];
      _module[0].apply(this, [require, mod, _exports2, _module[0], scope$$.modules, scope$$.exports]);
      scope$$.exports[_module.id] = mod.exports;

      if (isReload && typeof oldReloader === "function") {
        var accept = oldReloader.call();
        if (accept === true) {
          throw { accepted: true };
        }
      }
      return mod.exports;
    } else if (oldRequire) {
      return oldRequire.apply(undefined, arguments);
    } else {
      var e = new Error("Module not found: " + name);
      e.code = "MODULE_NOT_FOUND";
      throw e;
    }
  }

  function moduleKey(_ref, callerId, name) {
    var modules = _ref.modules;

    var _ref2 = modules[callerId] || {};

    var _ref2$deps = _ref2.deps;
    var deps = _ref2$deps === undefined ? {} : _ref2$deps;

    return deps[name];
  }

  // resolve module so that de-duplicated modules are skipped and the
  // original module is returned
  function findModule(_ref3, id) {
    var modules = _ref3.modules;

    var mod = modules[id];
    if (mod) {
      if (mod.dedupeIndex) {
        var orig = null;
        Object.keys(modules).forEach(function (id) {
          if (modules[id].index === mod.dedupeIndex) {
            orig = findModule({ modules: modules }, id);
          }
        });
        return orig;
      } else {
        return mod;
      }
    }
  }
})();;

       window.__livereactload$$ = {
         require: require,
         modules: modules,
         exports: {},
         reloaders: {},
         initModules: initModules
       };

       initModules();

       function initModules() {
         var allExports = window.__livereactload$$.exports;
         var modules    = window.__livereactload$$.modules;
         // initialize Browserify compatibility
         Object.keys(modules).forEach(function(id) {
           modules[id][0] = (function(require, module, exports) {
             if (!modules[id].__inited) {
               modules[id].__inited = true
               var __init = new Function("require", "module", "exports", modules[id].source);
               var _require = (function() { return require.apply(require, Array.prototype.slice.call(arguments).concat(id)); });
               __init(_require, module, exports, arguments[3], arguments[4], arguments[5], arguments[6]);
             }
           })
           modules[id][1] = modules[id].deps;
         })
       }
             (function() {
               require("livereactload/client", entryId$$).call(null,{"port":4474,"host":"localhost"});
require("./app.js", entryId$$);
             })();
           })({
  "1": {
    "id": 1,
    "index": 1,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/js/Network.js",
    "source": "'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _peerjs = require('peerjs');\n\nvar _peerjs2 = _interopRequireDefault(_peerjs);\n\nvar _uuidJs = require('uuid-js');\n\nvar _uuidJs2 = _interopRequireDefault(_uuidJs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Network = function () {\n  function Network() {\n    _classCallCheck(this, Network);\n\n    var uuid4 = _uuidJs2.default.create();\n    this.peer = new _peerjs2.default(uuid4.toString(), { host: 'localhost', port: 9000, path: '/' });\n  }\n\n  _createClass(Network, [{\n    key: 'connectToPeers',\n    value: function connectToPeers() {\n      // TODO: do actually connect..\n      this.peer.listAllPeers(function (peers) {\n        console.log(peers);\n      });\n    }\n  }]);\n\n  return Network;\n}();\n\nexports.default = Network;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5ldHdvcmsuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFHcUIsT0FBTztBQUMxQixXQURtQixPQUFPLEdBQ1o7MEJBREssT0FBTzs7QUFFeEIsUUFBSSxLQUFLLEdBQUcsaUJBQUssTUFBTSxFQUFFLENBQUM7QUFDMUIsUUFBSSxDQUFDLElBQUksR0FBRyxxQkFBUyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7R0FDcEY7O2VBSmtCLE9BQU87O3FDQU1UOztBQUVmLFVBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVMsS0FBSyxFQUFFO0FBQ3JDLGVBQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7T0FDcEIsQ0FBQyxDQUFDO0tBQ0o7OztTQVhrQixPQUFPOzs7a0JBQVAsT0FBTyIsImZpbGUiOiJOZXR3b3JrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBlZXIgZnJvbSAncGVlcmpzJztcbmltcG9ydCBVVUlEIGZyb20gJ3V1aWQtanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXR3b3JrIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdmFyIHV1aWQ0ID0gVVVJRC5jcmVhdGUoKTtcbiAgICB0aGlzLnBlZXIgPSBuZXcgUGVlcih1dWlkNC50b1N0cmluZygpLCB7aG9zdDogJ2xvY2FsaG9zdCcsIHBvcnQ6IDkwMDAsIHBhdGg6ICcvJ30pO1xuICB9XG5cbiAgY29ubmVjdFRvUGVlcnMoKSB7XG4gICAgLy8gVE9ETzogZG8gYWN0dWFsbHkgY29ubmVjdC4uXG4gICAgdGhpcy5wZWVyLmxpc3RBbGxQZWVycyhmdW5jdGlvbihwZWVycykge1xuICAgICAgY29uc29sZS5sb2cocGVlcnMpO1xuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==",
    "deps": {
      "uuid-js": 25,
      "peerjs": 17
    },
    "hash": "7dae904762bf79ef878df53a9dde7ded"
  },
  "2": {
    "id": 2,
    "index": 2,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/js/TupleSpace.js",
    "source": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _yocto = require('yocto');\n\nvar _yocto2 = _interopRequireDefault(_yocto);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TupleSpace = function TupleSpace() {\n  _classCallCheck(this, TupleSpace);\n\n  this.db = _yocto2.default.db({ uuid: 'id' });\n};\n\nexports.default = TupleSpace;\n\n['put', 'get', 'take', 'each', 'drop', 'destroy', 'sort', 'save', 'load', 'observe', 'unobserve', 'status'].forEach(function (key) {\n  TupleSpace.prototype[key] = function () {\n    this.db[key].call(this.db, arguments);\n  };\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlR1cGxlU3BhY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7SUFFcUIsVUFBVSxHQUM3QixTQURtQixVQUFVLEdBQ2Y7d0JBREssVUFBVTs7QUFFM0IsTUFBSSxDQUFDLEVBQUUsR0FBRyxnQkFBTSxFQUFFLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztDQUNsQzs7a0JBSGtCLFVBQVU7O0FBTS9CLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQ3ZFLFNBQVMsRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRyxFQUFLO0FBQ2hELFlBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsWUFBVztBQUNyQyxRQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ3ZDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoiVHVwbGVTcGFjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB5b2N0byBmcm9tICd5b2N0byc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR1cGxlU3BhY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRiID0geW9jdG8uZGIoe3V1aWQ6ICdpZCd9KTtcbiAgfVxufVxuXG5bJ3B1dCcsICdnZXQnLCAndGFrZScsICdlYWNoJywgJ2Ryb3AnLCAnZGVzdHJveScsICdzb3J0JywgJ3NhdmUnLCAnbG9hZCcsIFxuICdvYnNlcnZlJywgJ3Vub2JzZXJ2ZScsICdzdGF0dXMnXS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBUdXBsZVNwYWNlLnByb3RvdHlwZVtrZXldID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRiW2tleV0uY2FsbCh0aGlzLmRiLCBhcmd1bWVudHMpO1xuICAgIH07XG4gfSk7XG4iXX0=",
    "deps": {
      "yocto": 26
    },
    "hash": "3eeadfc25c785d84aa3968531b099f0e"
  },
  "3": {
    "id": 3,
    "index": 3,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/js/___livereactload_entry.js",
    "source": "require(\"livereactload/client\", entryId$$).call(null,{\"port\":4474,\"host\":\"localhost\"});\nrequire(\"./app.js\", entryId$$);",
    "deps": {
      "livereactload/client": 5,
      "./app.js": 4
    },
    "entry": true,
    "hash": "7a2ed8544a7ee7bbfd52b57cbb204d8c"
  },
  "4": {
    "id": 4,
    "index": 4,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/js/app.js",
    "source": "\"use strict\";\n\nvar _Network = require(\"./Network\");\n\nvar _Network2 = _interopRequireDefault(_Network);\n\nvar _TupleSpace = require(\"./TupleSpace\");\n\nvar _TupleSpace2 = _interopRequireDefault(_TupleSpace);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6W119",
    "deps": {
      "./Network": 1,
      "./TupleSpace": 2
    },
    "hash": "8f90cd03bed372d421fe41edb0fed231"
  },
  "5": {
    "id": 5,
    "index": 5,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/livereactload/client.js",
    "source": "\nmodule.exports = require(\"./lib/client/main.js\")\n",
    "deps": {
      "./lib/client/main.js": 8
    },
    "hash": "e497cd554968c27200a06c783e327db6"
  },
  "6": {
    "id": 6,
    "index": 6,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/livereactload/lib/client/console.js",
    "source": "Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.info = info;\nexports.warn = warn;\n\nfunction info(msg) {\n  console.info(\"LiveReactload ::\", msg);\n}\n\nfunction warn(msg) {\n  console.warn(\"LiveReactload ::\", msg);\n}",
    "deps": {},
    "hash": "c1346ae9c96c8d7e3f17a624faa71539"
  },
  "7": {
    "id": 7,
    "index": 7,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/livereactload/lib/client/handleChange.js",
    "source": "Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = handleChanges;\n\nvar _require = require(\"./reloadUtils\");\n\nvar diff = _require.diff;\nvar patchMetaData = _require.patchMetaData;\n\nvar _require2 = require(\"./console\");\n\nvar info = _require2.info;\nvar warn = _require2.warn;\n\nvar _require3 = require(\"../common\");\n\nvar isPlainObj = _require3.isPlainObj;\nvar values = _require3.values;\nvar find = _require3.find;\n\nfunction handleChanges(scope$$, _ref) {\n  var newModules = _ref.modules;\n  var newEntryId = _ref.entryId;\n  var modules = scope$$.modules;\n  var __require = scope$$.require;\n\n  var modulesToReload = diff(modules, newModules, newEntryId);\n  patchMetaData(scope$$, newModules);\n\n  if (modulesToReload.length === 0) {\n    info(\"Nothing to patch\");\n    return;\n  }\n\n  var patch = modulesToReload.map(function (mod) {\n    return {\n      id: mod.id,\n      changed: mod.changed,\n      file: mod.file,\n      source: mod.source,\n      parents: mod.parents.map(Number),\n      isNew: mod.isNew\n    };\n  });\n\n  var propagationGuards = {};\n  patch.forEach(function (_ref2) {\n    var id = _ref2.id;\n    var changed = _ref2.changed;\n    var parents = _ref2.parents;\n\n    propagationGuards[id] = (propagationGuards[id] || 0) + (changed ? 1 : 0);\n    parents.forEach(function (p) {\n      return propagationGuards[p] = (propagationGuards[p] || 0) + 1;\n    });\n  });\n\n  info(\"Apply patch\");\n  try {\n    patch.forEach(function (_ref3) {\n      var id = _ref3.id;\n      var file = _ref3.file;\n      var parents = _ref3.parents;\n      var isNew = _ref3.isNew;\n\n      if (propagationGuards[id] > 0) {\n        if (isNew) {\n          console.log(\" > Add new module  ::\", file);\n        } else {\n          console.log(\" > Patch module    ::\", file);\n        }\n\n        var reloadedExports = undefined,\n            accepted = false;\n        try {\n          // ATTENTION: must use scope object because it has been mutated during \"pathMetaData\"\n          delete scope$$.exports[id];\n          scope$$.modules[id].__inited = false;\n          reloadedExports = __require.__byId(id, true);\n        } catch (e) {\n          if (e.accepted) {\n            console.log(\" > Manually accepted\");\n            accepted = true;\n          } else {\n            console.error(e);\n            warn(\"Abort patching\");\n            throw { aborted: true };\n          }\n        }\n\n        if (!isNew && (accepted || isStoppable(reloadedExports || {}))) {\n          preventPropagation(parents);\n        }\n      } else {\n        // this will prevent propagation to ancestor files\n        preventPropagation(parents);\n      }\n    });\n    info(\"Patching complete\");\n  } catch (e) {\n    if (!e.aborted) {\n      console.error(e);\n    }\n  }\n\n  function preventPropagation(parents) {\n    parents.forEach(function (p) {\n      var parent = find(patch, function (_ref4) {\n        var id = _ref4.id;\n        return id === p;\n      });\n      if (parent) {\n        propagationGuards[parent.id]--;\n      }\n    });\n  }\n}\n\nfunction isStoppable(exports) {\n  if (isProxied(exports)) {\n    return true;\n  } else if (isPlainObj(exports)) {\n    return !!find(values(exports), isProxied);\n  }\n  return false;\n}\n\nfunction isProxied(o) {\n  return o && !!o.__reactPatchProxy;\n}\nmodule.exports = exports[\"default\"];",
    "deps": {
      "./console": 6,
      "../common": 11,
      "./reloadUtils": 9
    },
    "hash": "b39266feab4d6033f94707a39c4017bc"
  },
  "8": {
    "id": 8,
    "index": 8,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/livereactload/lib/client/main.js",
    "source": "Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = client;\nvar startClient = require(\"./startClient\");\nvar handleChange = require(\"./handleChange\");\n\nvar _require = require(\"./console\");\n\nvar info = _require.info;\n\nfunction client(opts) {\n  var start = arguments.length <= 1 || arguments[1] === undefined ? startClient : arguments[1];\n\n  var scope$$ = window.__livereactload$$;\n  scope$$.options = opts;\n  start(scope$$, {\n    change: function change(msg) {\n      info(\"Bundle changed\");\n      handleChange(scope$$, msg.data);\n    },\n    patch: function patch(msg) {}\n  });\n}\n\nmodule.exports = exports[\"default\"];",
    "deps": {
      "./console": 6,
      "./startClient": 10,
      "./handleChange": 7
    },
    "hash": "3e8211be523e5c4cdc210de68046744d"
  },
  "9": {
    "id": 9,
    "index": 9,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/livereactload/lib/client/reloadUtils.js",
    "source": "Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; })();\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.patchMetaData = patchMetaData;\nexports.diff = diff;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nvar _require = require(\"../common\");\n\nvar keys = _require.keys;\nvar values = _require.values;\nvar extend = _require.extend;\nvar sortBy = _require.sortBy;\nvar pairs = _require.pairs;\n\nfunction patchMetaData(scope$$, newModules) {\n  var modules = scope$$.modules;\n  var exports = scope$$.exports;\n\n  var oldModulesByFile = {};\n  values(modules).forEach(function (mod) {\n    return oldModulesByFile[mod.file] = mod;\n  });\n\n  var rearrangedExports = {};\n  keys(newModules).forEach(function (id) {\n    var oldModule = oldModulesByFile[newModules[id].file];\n    if (oldModule) {\n      rearrangedExports[id] = exports[oldModule.id];\n      newModules[id].__inited = true;\n    }\n  });\n\n  scope$$.exports = rearrangedExports;\n  scope$$.modules = newModules;\n  scope$$.initModules();\n}\n\nfunction diff(modules, newModules, newEntryId) {\n  var oldModulesByFile = {};\n  values(modules).forEach(function (mod) {\n    return oldModulesByFile[mod.file] = mod;\n  });\n\n  var changedModules = values(newModules).filter(function (_ref) {\n    var entry = _ref.entry;\n    var file = _ref.file;\n    var hash = _ref.hash;\n\n    return !oldModulesByFile[file] || oldModulesByFile[file].hash !== hash;\n  });\n\n  // resolve reverse dependencies so that we can calculate\n  // weights for correct reloading order\n  var dependencies = {};\n  function resolveDeps(mod) {\n    var deps = values(mod.deps);\n    dependencies[mod.id] = deps;\n    deps.forEach(function (d) {\n      if (!dependencies[d] && newModules[d]) resolveDeps(newModules[d]);\n    });\n  }\n  resolveDeps(newModules[newEntryId]);\n\n  var parents = {};\n  pairs(dependencies).forEach(function (_ref2) {\n    var _ref22 = _slicedToArray(_ref2, 2);\n\n    var id = _ref22[0];\n    var deps = _ref22[1];\n\n    deps.forEach(function (d) {\n      return parents[d] = [id].concat(_toConsumableArray(parents[d] || []));\n    });\n  });\n\n  // idea behind weighting: each file has initial weight = 1\n  // each file gets also the sum of its dependency weights\n  // finally files are sorted by weight => smaller ones must\n  // be reloaded before their dependants (bigger weights)\n  var weights = {};\n  var hasChanged = {};\n  changedModules.forEach(function (_ref3) {\n    var id = _ref3.id;\n\n    hasChanged[id] = true;\n    addWeightsStartingFrom(id, weights, parents);\n  });\n\n  var modulesToReload = sortBy(pairs(weights), function (_ref4) {\n    var _ref42 = _slicedToArray(_ref4, 2);\n\n    var _ = _ref42[0];\n    var weight = _ref42[1];\n    return weight;\n  }).map(function (_ref5) {\n    var _ref52 = _slicedToArray(_ref5, 1);\n\n    var id = _ref52[0];\n    return newModules[id];\n  }).filter(function (module) {\n    return !!module && !module.entry;\n  }).map(function (module) {\n    return _extends({}, module, {\n      changed: !!hasChanged[module.id],\n      parents: parents[module.id] || [],\n      isNew: !oldModulesByFile[module.file]\n    });\n  });\n\n  return modulesToReload;\n\n  function addWeightsStartingFrom(id, weights, parents) {\n    var visited = {};\n    weightRecur(id, 1);\n    function weightRecur(id, w) {\n      if (visited[id]) {\n        // prevent circular dependency stack overflow\n        return;\n      }\n      var dependants = parents[id] || [];\n      visited[id] = true;\n      weights[id] = (weights[id] || 0) + w;\n      dependants.forEach(function (d) {\n        return weightRecur(d, weights[id] + 1);\n      });\n    }\n  }\n}",
    "deps": {
      "../common": 11
    },
    "hash": "25862872bcb5fe29b724ddd43e15d931"
  },
  "10": {
    "id": 10,
    "index": 10,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/livereactload/lib/client/startClient.js",
    "source": "Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = startClient;\nvar WebSocket = require(\"ws\");\n\nvar _require = require(\"./console\");\n\nvar info = _require.info;\n\nvar noop = function noop() {};\n\nfunction startClient(scope$$, onMsg) {\n  if (!scope$$.ws) {\n    (function () {\n      var url = makeHostUrl(scope$$);\n      info(\"Connect reload client to \" + url);\n\n      var ws = new WebSocket(url);\n      ws.onopen = function () {\n        return info(\"WebSocket client listening for changes...\");\n      };\n\n      ws.onmessage = function (m) {\n        var msg = JSON.parse(m.data);\n        var res = (onMsg[msg.type] || noop)(msg);\n        if (res) {\n          ws.send(JSON.stringify(res));\n        }\n      };\n\n      scope$$.ws = ws;\n    })();\n  }\n}\n\nfunction makeHostUrl(_ref) {\n  var _ref$options = _ref.options;\n  var host = _ref$options.host;\n  var port = _ref$options.port;\n\n  var protocol = window.location.protocol === \"https:\" ? \"wss\" : \"ws\";\n  return protocol + \"://\" + host + \":\" + port;\n}\nmodule.exports = exports[\"default\"];",
    "deps": {
      "./console": 6,
      "ws": 12
    },
    "hash": "864f8de9d51e163a2b62286792371a56"
  },
  "11": {
    "id": 11,
    "index": 11,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/livereactload/lib/common.js",
    "source": "Object.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.keys = keys;\nexports.values = values;\nexports.pairs = pairs;\nexports.sortBy = sortBy;\nexports.extend = extend;\nexports.find = find;\nexports.isPlainObj = isPlainObj;\n\nfunction keys(obj) {\n  return Object.keys(obj);\n}\n\nfunction values(obj) {\n  return keys(obj).map(function (k) {\n    return obj[k];\n  });\n}\n\nfunction pairs(obj) {\n  return keys(obj).map(function (k) {\n    return [k, obj[k]];\n  });\n}\n\nfunction sortBy(arr, comp) {\n  return arr.slice().sort(function (a, b) {\n    return comp(a) < comp(b) ? -1 : comp(a) > comp(b) ? 1 : 0;\n  });\n}\n\nfunction extend(dest) {\n  for (var _len = arguments.length, objs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    objs[_key - 1] = arguments[_key];\n  }\n\n  objs.forEach(function (obj) {\n    var o = obj || {};\n    keys(o).forEach(function (k) {\n      if (o.hasOwnProperty(k)) {\n        dest[k] = o[k];\n      }\n    });\n  });\n  return dest;\n}\n\nfunction find(arr, predicate) {\n  var results = (arr || []).filter(predicate);\n  return results.length ? results[0] : undefined;\n}\n\nfunction isPlainObj(o) {\n  return typeof o == 'object' && o.constructor == Object;\n}",
    "deps": {},
    "hash": "2dd5bb1a473ce8ca0c7f8761d262b4fe"
  },
  "12": {
    "id": 12,
    "index": 12,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/livereactload/node_modules/ws/lib/browser.js",
    "source": "\n/**\n * Module dependencies.\n */\n\nvar global = (function() { return this; })();\n\n/**\n * WebSocket constructor.\n */\n\nvar WebSocket = global.WebSocket || global.MozWebSocket;\n\n/**\n * Module exports.\n */\n\nmodule.exports = WebSocket ? ws : null;\n\n/**\n * WebSocket constructor.\n *\n * The third `opts` options object gets ignored in web browsers, since it's\n * non-standard, and throws a TypeError if passed to the constructor.\n * See: https://github.com/einaros/ws/issues/227\n *\n * @param {String} uri\n * @param {Array} protocols (optional)\n * @param {Object) opts (optional)\n * @api public\n */\n\nfunction ws(uri, protocols, opts) {\n  var instance;\n  if (protocols) {\n    instance = new WebSocket(uri, protocols);\n  } else {\n    instance = new WebSocket(uri);\n  }\n  return instance;\n}\n\nif (WebSocket) ws.prototype = WebSocket.prototype;\n",
    "deps": {},
    "hash": "1e2bdb9308fb7f3575a514332777131f"
  },
  "13": {
    "id": 13,
    "index": 13,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/peerjs/lib/adapter.js",
    "source": "module.exports.RTCSessionDescription = window.RTCSessionDescription ||\n\twindow.mozRTCSessionDescription;\nmodule.exports.RTCPeerConnection = window.RTCPeerConnection ||\n\twindow.mozRTCPeerConnection || window.webkitRTCPeerConnection;\nmodule.exports.RTCIceCandidate = window.RTCIceCandidate ||\n\twindow.mozRTCIceCandidate;\n",
    "deps": {},
    "hash": "6c80fedc75ccbecb624bc71803b6f62e"
  },
  "14": {
    "id": 14,
    "index": 14,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/peerjs/lib/dataconnection.js",
    "source": "var util = require('./util');\nvar EventEmitter = require('eventemitter3');\nvar Negotiator = require('./negotiator');\nvar Reliable = require('reliable');\n\n/**\n * Wraps a DataChannel between two Peers.\n */\nfunction DataConnection(peer, provider, options) {\n  if (!(this instanceof DataConnection)) return new DataConnection(peer, provider, options);\n  EventEmitter.call(this);\n\n  this.options = util.extend({\n    serialization: 'binary',\n    reliable: false\n  }, options);\n\n  // Connection is not open yet.\n  this.open = false;\n  this.type = 'data';\n  this.peer = peer;\n  this.provider = provider;\n\n  this.id = this.options.connectionId || DataConnection._idPrefix + util.randomToken();\n\n  this.label = this.options.label || this.id;\n  this.metadata = this.options.metadata;\n  this.serialization = this.options.serialization;\n  this.reliable = this.options.reliable;\n\n  // Data channel buffering.\n  this._buffer = [];\n  this._buffering = false;\n  this.bufferSize = 0;\n\n  // For storing large data.\n  this._chunkedData = {};\n\n  if (this.options._payload) {\n    this._peerBrowser = this.options._payload.browser;\n  }\n\n  Negotiator.startConnection(\n    this,\n    this.options._payload || {\n      originator: true\n    }\n  );\n}\n\nutil.inherits(DataConnection, EventEmitter);\n\nDataConnection._idPrefix = 'dc_';\n\n/** Called by the Negotiator when the DataChannel is ready. */\nDataConnection.prototype.initialize = function(dc) {\n  this._dc = this.dataChannel = dc;\n  this._configureDataChannel();\n}\n\nDataConnection.prototype._configureDataChannel = function() {\n  var self = this;\n  if (util.supports.sctp) {\n    this._dc.binaryType = 'arraybuffer';\n  }\n  this._dc.onopen = function() {\n    util.log('Data channel connection success');\n    self.open = true;\n    self.emit('open');\n  }\n\n  // Use the Reliable shim for non Firefox browsers\n  if (!util.supports.sctp && this.reliable) {\n    this._reliable = new Reliable(this._dc, util.debug);\n  }\n\n  if (this._reliable) {\n    this._reliable.onmessage = function(msg) {\n      self.emit('data', msg);\n    };\n  } else {\n    this._dc.onmessage = function(e) {\n      self._handleDataMessage(e);\n    };\n  }\n  this._dc.onclose = function(e) {\n    util.log('DataChannel closed for:', self.peer);\n    self.close();\n  };\n}\n\n// Handles a DataChannel message.\nDataConnection.prototype._handleDataMessage = function(e) {\n  var self = this;\n  var data = e.data;\n  var datatype = data.constructor;\n  if (this.serialization === 'binary' || this.serialization === 'binary-utf8') {\n    if (datatype === Blob) {\n      // Datatype should never be blob\n      util.blobToArrayBuffer(data, function(ab) {\n        data = util.unpack(ab);\n        self.emit('data', data);\n      });\n      return;\n    } else if (datatype === ArrayBuffer) {\n      data = util.unpack(data);\n    } else if (datatype === String) {\n      // String fallback for binary data for browsers that don't support binary yet\n      var ab = util.binaryStringToArrayBuffer(data);\n      data = util.unpack(ab);\n    }\n  } else if (this.serialization === 'json') {\n    data = JSON.parse(data);\n  }\n\n  // Check if we've chunked--if so, piece things back together.\n  // We're guaranteed that this isn't 0.\n  if (data.__peerData) {\n    var id = data.__peerData;\n    var chunkInfo = this._chunkedData[id] || {data: [], count: 0, total: data.total};\n\n    chunkInfo.data[data.n] = data.data;\n    chunkInfo.count += 1;\n\n    if (chunkInfo.total === chunkInfo.count) {\n      // Clean up before making the recursive call to `_handleDataMessage`.\n      delete this._chunkedData[id];\n\n      // We've received all the chunks--time to construct the complete data.\n      data = new Blob(chunkInfo.data);\n      this._handleDataMessage({data: data});\n    }\n\n    this._chunkedData[id] = chunkInfo;\n    return;\n  }\n\n  this.emit('data', data);\n}\n\n/**\n * Exposed functionality for users.\n */\n\n/** Allows user to close connection. */\nDataConnection.prototype.close = function() {\n  if (!this.open) {\n    return;\n  }\n  this.open = false;\n  Negotiator.cleanup(this);\n  this.emit('close');\n}\n\n/** Allows user to send data. */\nDataConnection.prototype.send = function(data, chunked) {\n  if (!this.open) {\n    this.emit('error', new Error('Connection is not open. You should listen for the `open` event before sending messages.'));\n    return;\n  }\n  if (this._reliable) {\n    // Note: reliable shim sending will make it so that you cannot customize\n    // serialization.\n    this._reliable.send(data);\n    return;\n  }\n  var self = this;\n  if (this.serialization === 'json') {\n    this._bufferedSend(JSON.stringify(data));\n  } else if (this.serialization === 'binary' || this.serialization === 'binary-utf8') {\n    var blob = util.pack(data);\n\n    // For Chrome-Firefox interoperability, we need to make Firefox \"chunk\"\n    // the data it sends out.\n    var needsChunking = util.chunkedBrowsers[this._peerBrowser] || util.chunkedBrowsers[util.browser];\n    if (needsChunking && !chunked && blob.size > util.chunkedMTU) {\n      this._sendChunks(blob);\n      return;\n    }\n\n    // DataChannel currently only supports strings.\n    if (!util.supports.sctp) {\n      util.blobToBinaryString(blob, function(str) {\n        self._bufferedSend(str);\n      });\n    } else if (!util.supports.binaryBlob) {\n      // We only do this if we really need to (e.g. blobs are not supported),\n      // because this conversion is costly.\n      util.blobToArrayBuffer(blob, function(ab) {\n        self._bufferedSend(ab);\n      });\n    } else {\n      this._bufferedSend(blob);\n    }\n  } else {\n    this._bufferedSend(data);\n  }\n}\n\nDataConnection.prototype._bufferedSend = function(msg) {\n  if (this._buffering || !this._trySend(msg)) {\n    this._buffer.push(msg);\n    this.bufferSize = this._buffer.length;\n  }\n}\n\n// Returns true if the send succeeds.\nDataConnection.prototype._trySend = function(msg) {\n  try {\n    this._dc.send(msg);\n  } catch (e) {\n    this._buffering = true;\n\n    var self = this;\n    setTimeout(function() {\n      // Try again.\n      self._buffering = false;\n      self._tryBuffer();\n    }, 100);\n    return false;\n  }\n  return true;\n}\n\n// Try to send the first message in the buffer.\nDataConnection.prototype._tryBuffer = function() {\n  if (this._buffer.length === 0) {\n    return;\n  }\n\n  var msg = this._buffer[0];\n\n  if (this._trySend(msg)) {\n    this._buffer.shift();\n    this.bufferSize = this._buffer.length;\n    this._tryBuffer();\n  }\n}\n\nDataConnection.prototype._sendChunks = function(blob) {\n  var blobs = util.chunk(blob);\n  for (var i = 0, ii = blobs.length; i < ii; i += 1) {\n    var blob = blobs[i];\n    this.send(blob, true);\n  }\n}\n\nDataConnection.prototype.handleMessage = function(message) {\n  var payload = message.payload;\n\n  switch (message.type) {\n    case 'ANSWER':\n      this._peerBrowser = payload.browser;\n\n      // Forward to negotiator\n      Negotiator.handleSDP(message.type, this, payload.sdp);\n      break;\n    case 'CANDIDATE':\n      Negotiator.handleCandidate(this, payload.candidate);\n      break;\n    default:\n      util.warn('Unrecognized message type:', message.type, 'from peer:', this.peer);\n      break;\n  }\n}\n\nmodule.exports = DataConnection;\n",
    "deps": {
      "./util": 19,
      "./negotiator": 16,
      "eventemitter3": 20,
      "reliable": 23
    },
    "hash": "cee4a24577f80fe8be180732920ab8f1"
  },
  "15": {
    "id": 15,
    "index": 15,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/peerjs/lib/mediaconnection.js",
    "source": "var util = require('./util');\nvar EventEmitter = require('eventemitter3');\nvar Negotiator = require('./negotiator');\n\n/**\n * Wraps the streaming interface between two Peers.\n */\nfunction MediaConnection(peer, provider, options) {\n  if (!(this instanceof MediaConnection)) return new MediaConnection(peer, provider, options);\n  EventEmitter.call(this);\n\n  this.options = util.extend({}, options);\n\n  this.open = false;\n  this.type = 'media';\n  this.peer = peer;\n  this.provider = provider;\n  this.metadata = this.options.metadata;\n  this.localStream = this.options._stream;\n\n  this.id = this.options.connectionId || MediaConnection._idPrefix + util.randomToken();\n  if (this.localStream) {\n    Negotiator.startConnection(\n      this,\n      {_stream: this.localStream, originator: true}\n    );\n  }\n};\n\nutil.inherits(MediaConnection, EventEmitter);\n\nMediaConnection._idPrefix = 'mc_';\n\nMediaConnection.prototype.addStream = function(remoteStream) {\n  util.log('Receiving stream', remoteStream);\n\n  this.remoteStream = remoteStream;\n  this.emit('stream', remoteStream); // Should we call this `open`?\n\n};\n\nMediaConnection.prototype.handleMessage = function(message) {\n  var payload = message.payload;\n\n  switch (message.type) {\n    case 'ANSWER':\n      // Forward to negotiator\n      Negotiator.handleSDP(message.type, this, payload.sdp);\n      this.open = true;\n      break;\n    case 'CANDIDATE':\n      Negotiator.handleCandidate(this, payload.candidate);\n      break;\n    default:\n      util.warn('Unrecognized message type:', message.type, 'from peer:', this.peer);\n      break;\n  }\n}\n\nMediaConnection.prototype.answer = function(stream) {\n  if (this.localStream) {\n    util.warn('Local stream already exists on this MediaConnection. Are you answering a call twice?');\n    return;\n  }\n\n  this.options._payload._stream = stream;\n\n  this.localStream = stream;\n  Negotiator.startConnection(\n    this,\n    this.options._payload\n  )\n  // Retrieve lost messages stored because PeerConnection not set up.\n  var messages = this.provider._getMessages(this.id);\n  for (var i = 0, ii = messages.length; i < ii; i += 1) {\n    this.handleMessage(messages[i]);\n  }\n  this.open = true;\n};\n\n/**\n * Exposed functionality for users.\n */\n\n/** Allows user to close connection. */\nMediaConnection.prototype.close = function() {\n  if (!this.open) {\n    return;\n  }\n  this.open = false;\n  Negotiator.cleanup(this);\n  this.emit('close')\n};\n\nmodule.exports = MediaConnection;\n",
    "deps": {
      "./util": 19,
      "eventemitter3": 20,
      "./negotiator": 16
    },
    "hash": "8545d06a7310297070d75b946e8ba2e1"
  },
  "16": {
    "id": 16,
    "index": 16,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/peerjs/lib/negotiator.js",
    "source": "var util = require('./util');\nvar RTCPeerConnection = require('./adapter').RTCPeerConnection;\nvar RTCSessionDescription = require('./adapter').RTCSessionDescription;\nvar RTCIceCandidate = require('./adapter').RTCIceCandidate;\n\n/**\n * Manages all negotiations between Peers.\n */\nvar Negotiator = {\n  pcs: {\n    data: {},\n    media: {}\n  }, // type => {peerId: {pc_id: pc}}.\n  //providers: {}, // provider's id => providers (there may be multiple providers/client.\n  queue: [] // connections that are delayed due to a PC being in use.\n}\n\nNegotiator._idPrefix = 'pc_';\n\n/** Returns a PeerConnection object set up correctly (for data, media). */\nNegotiator.startConnection = function(connection, options) {\n  var pc = Negotiator._getPeerConnection(connection, options);\n\n  if (connection.type === 'media' && options._stream) {\n    // Add the stream.\n    pc.addStream(options._stream);\n  }\n\n  // Set the connection's PC.\n  connection.pc = connection.peerConnection = pc;\n  // What do we need to do now?\n  if (options.originator) {\n    if (connection.type === 'data') {\n      // Create the datachannel.\n      var config = {};\n      // Dropping reliable:false support, since it seems to be crashing\n      // Chrome.\n      /*if (util.supports.sctp && !options.reliable) {\n        // If we have canonical reliable support...\n        config = {maxRetransmits: 0};\n      }*/\n      // Fallback to ensure older browsers don't crash.\n      if (!util.supports.sctp) {\n        config = {reliable: options.reliable};\n      }\n      var dc = pc.createDataChannel(connection.label, config);\n      connection.initialize(dc);\n    }\n\n    if (!util.supports.onnegotiationneeded) {\n      Negotiator._makeOffer(connection);\n    }\n  } else {\n    Negotiator.handleSDP('OFFER', connection, options.sdp);\n  }\n}\n\nNegotiator._getPeerConnection = function(connection, options) {\n  if (!Negotiator.pcs[connection.type]) {\n    util.error(connection.type + ' is not a valid connection type. Maybe you overrode the `type` property somewhere.');\n  }\n\n  if (!Negotiator.pcs[connection.type][connection.peer]) {\n    Negotiator.pcs[connection.type][connection.peer] = {};\n  }\n  var peerConnections = Negotiator.pcs[connection.type][connection.peer];\n\n  var pc;\n  // Not multiplexing while FF and Chrome have not-great support for it.\n  /*if (options.multiplex) {\n    ids = Object.keys(peerConnections);\n    for (var i = 0, ii = ids.length; i < ii; i += 1) {\n      pc = peerConnections[ids[i]];\n      if (pc.signalingState === 'stable') {\n        break; // We can go ahead and use this PC.\n      }\n    }\n  } else */\n  if (options.pc) { // Simplest case: PC id already provided for us.\n    pc = Negotiator.pcs[connection.type][connection.peer][options.pc];\n  }\n\n  if (!pc || pc.signalingState !== 'stable') {\n    pc = Negotiator._startPeerConnection(connection);\n  }\n  return pc;\n}\n\n/*\nNegotiator._addProvider = function(provider) {\n  if ((!provider.id && !provider.disconnected) || !provider.socket.open) {\n    // Wait for provider to obtain an ID.\n    provider.on('open', function(id) {\n      Negotiator._addProvider(provider);\n    });\n  } else {\n    Negotiator.providers[provider.id] = provider;\n  }\n}*/\n\n\n/** Start a PC. */\nNegotiator._startPeerConnection = function(connection) {\n  util.log('Creating RTCPeerConnection.');\n\n  var id = Negotiator._idPrefix + util.randomToken();\n  var optional = {};\n\n  if (connection.type === 'data' && !util.supports.sctp) {\n    optional = {optional: [{RtpDataChannels: true}]};\n  } else if (connection.type === 'media') {\n    // Interop req for chrome.\n    optional = {optional: [{DtlsSrtpKeyAgreement: true}]};\n  }\n\n  var pc = new RTCPeerConnection(connection.provider.options.config, optional);\n  Negotiator.pcs[connection.type][connection.peer][id] = pc;\n\n  Negotiator._setupListeners(connection, pc, id);\n\n  return pc;\n}\n\n/** Set up various WebRTC listeners. */\nNegotiator._setupListeners = function(connection, pc, pc_id) {\n  var peerId = connection.peer;\n  var connectionId = connection.id;\n  var provider = connection.provider;\n\n  // ICE CANDIDATES.\n  util.log('Listening for ICE candidates.');\n  pc.onicecandidate = function(evt) {\n    if (evt.candidate) {\n      util.log('Received ICE candidates for:', connection.peer);\n      provider.socket.send({\n        type: 'CANDIDATE',\n        payload: {\n          candidate: evt.candidate,\n          type: connection.type,\n          connectionId: connection.id\n        },\n        dst: peerId\n      });\n    }\n  };\n\n  pc.oniceconnectionstatechange = function() {\n    switch (pc.iceConnectionState) {\n      case 'disconnected':\n      case 'failed':\n        util.log('iceConnectionState is disconnected, closing connections to ' + peerId);\n        connection.close();\n        break;\n      case 'completed':\n        pc.onicecandidate = util.noop;\n        break;\n    }\n  };\n\n  // Fallback for older Chrome impls.\n  pc.onicechange = pc.oniceconnectionstatechange;\n\n  // ONNEGOTIATIONNEEDED (Chrome)\n  util.log('Listening for `negotiationneeded`');\n  pc.onnegotiationneeded = function() {\n    util.log('`negotiationneeded` triggered');\n    if (pc.signalingState == 'stable') {\n      Negotiator._makeOffer(connection);\n    } else {\n      util.log('onnegotiationneeded triggered when not stable. Is another connection being established?');\n    }\n  };\n\n  // DATACONNECTION.\n  util.log('Listening for data channel');\n  // Fired between offer and answer, so options should already be saved\n  // in the options hash.\n  pc.ondatachannel = function(evt) {\n    util.log('Received data channel');\n    var dc = evt.channel;\n    var connection = provider.getConnection(peerId, connectionId);\n    connection.initialize(dc);\n  };\n\n  // MEDIACONNECTION.\n  util.log('Listening for remote stream');\n  pc.onaddstream = function(evt) {\n    util.log('Received remote stream');\n    var stream = evt.stream;\n    var connection = provider.getConnection(peerId, connectionId);\n    // 10/10/2014: looks like in Chrome 38, onaddstream is triggered after\n    // setting the remote description. Our connection object in these cases\n    // is actually a DATA connection, so addStream fails.\n    // TODO: This is hopefully just a temporary fix. We should try to\n    // understand why this is happening.\n    if (connection.type === 'media') {\n      connection.addStream(stream);\n    }\n  };\n}\n\nNegotiator.cleanup = function(connection) {\n  util.log('Cleaning up PeerConnection to ' + connection.peer);\n\n  var pc = connection.pc;\n\n  if (!!pc && (pc.readyState !== 'closed' || pc.signalingState !== 'closed')) {\n    pc.close();\n    connection.pc = null;\n  }\n}\n\nNegotiator._makeOffer = function(connection) {\n  var pc = connection.pc;\n  pc.createOffer(function(offer) {\n    util.log('Created offer.');\n\n    if (!util.supports.sctp && connection.type === 'data' && connection.reliable) {\n      offer.sdp = Reliable.higherBandwidthSDP(offer.sdp);\n    }\n\n    pc.setLocalDescription(offer, function() {\n      util.log('Set localDescription: offer', 'for:', connection.peer);\n      connection.provider.socket.send({\n        type: 'OFFER',\n        payload: {\n          sdp: offer,\n          type: connection.type,\n          label: connection.label,\n          connectionId: connection.id,\n          reliable: connection.reliable,\n          serialization: connection.serialization,\n          metadata: connection.metadata,\n          browser: util.browser\n        },\n        dst: connection.peer\n      });\n    }, function(err) {\n      connection.provider.emitError('webrtc', err);\n      util.log('Failed to setLocalDescription, ', err);\n    });\n  }, function(err) {\n    connection.provider.emitError('webrtc', err);\n    util.log('Failed to createOffer, ', err);\n  }, connection.options.constraints);\n}\n\nNegotiator._makeAnswer = function(connection) {\n  var pc = connection.pc;\n\n  pc.createAnswer(function(answer) {\n    util.log('Created answer.');\n\n    if (!util.supports.sctp && connection.type === 'data' && connection.reliable) {\n      answer.sdp = Reliable.higherBandwidthSDP(answer.sdp);\n    }\n\n    pc.setLocalDescription(answer, function() {\n      util.log('Set localDescription: answer', 'for:', connection.peer);\n      connection.provider.socket.send({\n        type: 'ANSWER',\n        payload: {\n          sdp: answer,\n          type: connection.type,\n          connectionId: connection.id,\n          browser: util.browser\n        },\n        dst: connection.peer\n      });\n    }, function(err) {\n      connection.provider.emitError('webrtc', err);\n      util.log('Failed to setLocalDescription, ', err);\n    });\n  }, function(err) {\n    connection.provider.emitError('webrtc', err);\n    util.log('Failed to create answer, ', err);\n  });\n}\n\n/** Handle an SDP. */\nNegotiator.handleSDP = function(type, connection, sdp) {\n  sdp = new RTCSessionDescription(sdp);\n  var pc = connection.pc;\n\n  util.log('Setting remote description', sdp);\n  pc.setRemoteDescription(sdp, function() {\n    util.log('Set remoteDescription:', type, 'for:', connection.peer);\n\n    if (type === 'OFFER') {\n      Negotiator._makeAnswer(connection);\n    }\n  }, function(err) {\n    connection.provider.emitError('webrtc', err);\n    util.log('Failed to setRemoteDescription, ', err);\n  });\n}\n\n/** Handle a candidate. */\nNegotiator.handleCandidate = function(connection, ice) {\n  var candidate = ice.candidate;\n  var sdpMLineIndex = ice.sdpMLineIndex;\n  connection.pc.addIceCandidate(new RTCIceCandidate({\n    sdpMLineIndex: sdpMLineIndex,\n    candidate: candidate\n  }));\n  util.log('Added ICE candidate for:', connection.peer);\n}\n\nmodule.exports = Negotiator;\n",
    "deps": {
      "./adapter": 13,
      "./util": 19
    },
    "hash": "deab4d58e52dc8e1c31e0931760fdccf"
  },
  "17": {
    "id": 17,
    "index": 17,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/peerjs/lib/peer.js",
    "source": "var util = require('./util');\nvar EventEmitter = require('eventemitter3');\nvar Socket = require('./socket');\nvar MediaConnection = require('./mediaconnection');\nvar DataConnection = require('./dataconnection');\n\n/**\n * A peer who can initiate connections with other peers.\n */\nfunction Peer(id, options) {\n  if (!(this instanceof Peer)) return new Peer(id, options);\n  EventEmitter.call(this);\n\n  // Deal with overloading\n  if (id && id.constructor == Object) {\n    options = id;\n    id = undefined;\n  } else if (id) {\n    // Ensure id is a string\n    id = id.toString();\n  }\n  //\n\n  // Configurize options\n  options = util.extend({\n    debug: 0, // 1: Errors, 2: Warnings, 3: All logs\n    host: util.CLOUD_HOST,\n    port: util.CLOUD_PORT,\n    key: 'peerjs',\n    path: '/',\n    token: util.randomToken(),\n    config: util.defaultConfig\n  }, options);\n  this.options = options;\n  // Detect relative URL host.\n  if (options.host === '/') {\n    options.host = window.location.hostname;\n  }\n  // Set path correctly.\n  if (options.path[0] !== '/') {\n    options.path = '/' + options.path;\n  }\n  if (options.path[options.path.length - 1] !== '/') {\n    options.path += '/';\n  }\n\n  // Set whether we use SSL to same as current host\n  if (options.secure === undefined && options.host !== util.CLOUD_HOST) {\n    options.secure = util.isSecure();\n  }\n  // Set a custom log function if present\n  if (options.logFunction) {\n    util.setLogFunction(options.logFunction);\n  }\n  util.setLogLevel(options.debug);\n  //\n\n  // Sanity checks\n  // Ensure WebRTC supported\n  if (!util.supports.audioVideo && !util.supports.data ) {\n    this._delayedAbort('browser-incompatible', 'The current browser does not support WebRTC');\n    return;\n  }\n  // Ensure alphanumeric id\n  if (!util.validateId(id)) {\n    this._delayedAbort('invalid-id', 'ID \"' + id + '\" is invalid');\n    return;\n  }\n  // Ensure valid key\n  if (!util.validateKey(options.key)) {\n    this._delayedAbort('invalid-key', 'API KEY \"' + options.key + '\" is invalid');\n    return;\n  }\n  // Ensure not using unsecure cloud server on SSL page\n  if (options.secure && options.host === '0.peerjs.com') {\n    this._delayedAbort('ssl-unavailable',\n      'The cloud server currently does not support HTTPS. Please run your own PeerServer to use HTTPS.');\n    return;\n  }\n  //\n\n  // States.\n  this.destroyed = false; // Connections have been killed\n  this.disconnected = false; // Connection to PeerServer killed but P2P connections still active\n  this.open = false; // Sockets and such are not yet open.\n  //\n\n  // References\n  this.connections = {}; // DataConnections for this peer.\n  this._lostMessages = {}; // src => [list of messages]\n  //\n\n  // Start the server connection\n  this._initializeServerConnection();\n  if (id) {\n    this._initialize(id);\n  } else {\n    this._retrieveId();\n  }\n  //\n}\n\nutil.inherits(Peer, EventEmitter);\n\n// Initialize the 'socket' (which is actually a mix of XHR streaming and\n// websockets.)\nPeer.prototype._initializeServerConnection = function() {\n  var self = this;\n  this.socket = new Socket(this.options.secure, this.options.host, this.options.port, this.options.path, this.options.key);\n  this.socket.on('message', function(data) {\n    self._handleMessage(data);\n  });\n  this.socket.on('error', function(error) {\n    self._abort('socket-error', error);\n  });\n  this.socket.on('disconnected', function() {\n    // If we haven't explicitly disconnected, emit error and disconnect.\n    if (!self.disconnected) {\n      self.emitError('network', 'Lost connection to server.');\n      self.disconnect();\n    }\n  });\n  this.socket.on('close', function() {\n    // If we haven't explicitly disconnected, emit error.\n    if (!self.disconnected) {\n      self._abort('socket-closed', 'Underlying socket is already closed.');\n    }\n  });\n};\n\n/** Get a unique ID from the server via XHR. */\nPeer.prototype._retrieveId = function(cb) {\n  var self = this;\n  var http = new XMLHttpRequest();\n  var protocol = this.options.secure ? 'https://' : 'http://';\n  var url = protocol + this.options.host + ':' + this.options.port +\n    this.options.path + this.options.key + '/id';\n  var queryString = '?ts=' + new Date().getTime() + '' + Math.random();\n  url += queryString;\n\n  // If there's no ID we need to wait for one before trying to init socket.\n  http.open('get', url, true);\n  http.onerror = function(e) {\n    util.error('Error retrieving ID', e);\n    var pathError = '';\n    if (self.options.path === '/' && self.options.host !== util.CLOUD_HOST) {\n      pathError = ' If you passed in a `path` to your self-hosted PeerServer, ' +\n        'you\\'ll also need to pass in that same path when creating a new ' +\n        'Peer.';\n    }\n    self._abort('server-error', 'Could not get an ID from the server.' + pathError);\n  };\n  http.onreadystatechange = function() {\n    if (http.readyState !== 4) {\n      return;\n    }\n    if (http.status !== 200) {\n      http.onerror();\n      return;\n    }\n    self._initialize(http.responseText);\n  };\n  http.send(null);\n};\n\n/** Initialize a connection with the server. */\nPeer.prototype._initialize = function(id) {\n  this.id = id;\n  this.socket.start(this.id, this.options.token);\n};\n\n/** Handles messages from the server. */\nPeer.prototype._handleMessage = function(message) {\n  var type = message.type;\n  var payload = message.payload;\n  var peer = message.src;\n  var connection;\n\n  switch (type) {\n    case 'OPEN': // The connection to the server is open.\n      this.emit('open', this.id);\n      this.open = true;\n      break;\n    case 'ERROR': // Server error.\n      this._abort('server-error', payload.msg);\n      break;\n    case 'ID-TAKEN': // The selected ID is taken.\n      this._abort('unavailable-id', 'ID `' + this.id + '` is taken');\n      break;\n    case 'INVALID-KEY': // The given API key cannot be found.\n      this._abort('invalid-key', 'API KEY \"' + this.options.key + '\" is invalid');\n      break;\n\n    //\n    case 'LEAVE': // Another peer has closed its connection to this peer.\n      util.log('Received leave message from', peer);\n      this._cleanupPeer(peer);\n      break;\n\n    case 'EXPIRE': // The offer sent to a peer has expired without response.\n      this.emitError('peer-unavailable', 'Could not connect to peer ' + peer);\n      break;\n    case 'OFFER': // we should consider switching this to CALL/CONNECT, but this is the least breaking option.\n      var connectionId = payload.connectionId;\n      connection = this.getConnection(peer, connectionId);\n\n      if (connection) {\n        util.warn('Offer received for existing Connection ID:', connectionId);\n        //connection.handleMessage(message);\n      } else {\n        // Create a new connection.\n        if (payload.type === 'media') {\n          connection = new MediaConnection(peer, this, {\n            connectionId: connectionId,\n            _payload: payload,\n            metadata: payload.metadata\n          });\n          this._addConnection(peer, connection);\n          this.emit('call', connection);\n        } else if (payload.type === 'data') {\n          connection = new DataConnection(peer, this, {\n            connectionId: connectionId,\n            _payload: payload,\n            metadata: payload.metadata,\n            label: payload.label,\n            serialization: payload.serialization,\n            reliable: payload.reliable\n          });\n          this._addConnection(peer, connection);\n          this.emit('connection', connection);\n        } else {\n          util.warn('Received malformed connection type:', payload.type);\n          return;\n        }\n        // Find messages.\n        var messages = this._getMessages(connectionId);\n        for (var i = 0, ii = messages.length; i < ii; i += 1) {\n          connection.handleMessage(messages[i]);\n        }\n      }\n      break;\n    default:\n      if (!payload) {\n        util.warn('You received a malformed message from ' + peer + ' of type ' + type);\n        return;\n      }\n\n      var id = payload.connectionId;\n      connection = this.getConnection(peer, id);\n\n      if (connection && connection.pc) {\n        // Pass it on.\n        connection.handleMessage(message);\n      } else if (id) {\n        // Store for possible later use\n        this._storeMessage(id, message);\n      } else {\n        util.warn('You received an unrecognized message:', message);\n      }\n      break;\n  }\n};\n\n/** Stores messages without a set up connection, to be claimed later. */\nPeer.prototype._storeMessage = function(connectionId, message) {\n  if (!this._lostMessages[connectionId]) {\n    this._lostMessages[connectionId] = [];\n  }\n  this._lostMessages[connectionId].push(message);\n};\n\n/** Retrieve messages from lost message store */\nPeer.prototype._getMessages = function(connectionId) {\n  var messages = this._lostMessages[connectionId];\n  if (messages) {\n    delete this._lostMessages[connectionId];\n    return messages;\n  } else {\n    return [];\n  }\n};\n\n/**\n * Returns a DataConnection to the specified peer. See documentation for a\n * complete list of options.\n */\nPeer.prototype.connect = function(peer, options) {\n  if (this.disconnected) {\n    util.warn('You cannot connect to a new Peer because you called ' +\n      '.disconnect() on this Peer and ended your connection with the ' +\n      'server. You can create a new Peer to reconnect, or call reconnect ' +\n      'on this peer if you believe its ID to still be available.');\n    this.emitError('disconnected', 'Cannot connect to new Peer after disconnecting from server.');\n    return;\n  }\n  var connection = new DataConnection(peer, this, options);\n  this._addConnection(peer, connection);\n  return connection;\n};\n\n/**\n * Returns a MediaConnection to the specified peer. See documentation for a\n * complete list of options.\n */\nPeer.prototype.call = function(peer, stream, options) {\n  if (this.disconnected) {\n    util.warn('You cannot connect to a new Peer because you called ' +\n      '.disconnect() on this Peer and ended your connection with the ' +\n      'server. You can create a new Peer to reconnect.');\n    this.emitError('disconnected', 'Cannot connect to new Peer after disconnecting from server.');\n    return;\n  }\n  if (!stream) {\n    util.error('To call a peer, you must provide a stream from your browser\\'s `getUserMedia`.');\n    return;\n  }\n  options = options || {};\n  options._stream = stream;\n  var call = new MediaConnection(peer, this, options);\n  this._addConnection(peer, call);\n  return call;\n};\n\n/** Add a data/media connection to this peer. */\nPeer.prototype._addConnection = function(peer, connection) {\n  if (!this.connections[peer]) {\n    this.connections[peer] = [];\n  }\n  this.connections[peer].push(connection);\n};\n\n/** Retrieve a data/media connection for this peer. */\nPeer.prototype.getConnection = function(peer, id) {\n  var connections = this.connections[peer];\n  if (!connections) {\n    return null;\n  }\n  for (var i = 0, ii = connections.length; i < ii; i++) {\n    if (connections[i].id === id) {\n      return connections[i];\n    }\n  }\n  return null;\n};\n\nPeer.prototype._delayedAbort = function(type, message) {\n  var self = this;\n  util.setZeroTimeout(function(){\n    self._abort(type, message);\n  });\n};\n\n/**\n * Destroys the Peer and emits an error message.\n * The Peer is not destroyed if it's in a disconnected state, in which case\n * it retains its disconnected state and its existing connections.\n */\nPeer.prototype._abort = function(type, message) {\n  util.error('Aborting!');\n  if (!this._lastServerId) {\n    this.destroy();\n  } else {\n    this.disconnect();\n  }\n  this.emitError(type, message);\n};\n\n/** Emits a typed error message. */\nPeer.prototype.emitError = function(type, err) {\n  util.error('Error:', err);\n  if (typeof err === 'string') {\n    err = new Error(err);\n  }\n  err.type = type;\n  this.emit('error', err);\n};\n\n/**\n * Destroys the Peer: closes all active connections as well as the connection\n *  to the server.\n * Warning: The peer can no longer create or accept connections after being\n *  destroyed.\n */\nPeer.prototype.destroy = function() {\n  if (!this.destroyed) {\n    this._cleanup();\n    this.disconnect();\n    this.destroyed = true;\n  }\n};\n\n\n/** Disconnects every connection on this peer. */\nPeer.prototype._cleanup = function() {\n  if (this.connections) {\n    var peers = Object.keys(this.connections);\n    for (var i = 0, ii = peers.length; i < ii; i++) {\n      this._cleanupPeer(peers[i]);\n    }\n  }\n  this.emit('close');\n};\n\n/** Closes all connections to this peer. */\nPeer.prototype._cleanupPeer = function(peer) {\n  var connections = this.connections[peer];\n  for (var j = 0, jj = connections.length; j < jj; j += 1) {\n    connections[j].close();\n  }\n};\n\n/**\n * Disconnects the Peer's connection to the PeerServer. Does not close any\n *  active connections.\n * Warning: The peer can no longer create or accept connections after being\n *  disconnected. It also cannot reconnect to the server.\n */\nPeer.prototype.disconnect = function() {\n  var self = this;\n  util.setZeroTimeout(function(){\n    if (!self.disconnected) {\n      self.disconnected = true;\n      self.open = false;\n      if (self.socket) {\n        self.socket.close();\n      }\n      self.emit('disconnected', self.id);\n      self._lastServerId = self.id;\n      self.id = null;\n    }\n  });\n};\n\n/** Attempts to reconnect with the same ID. */\nPeer.prototype.reconnect = function() {\n  if (this.disconnected && !this.destroyed) {\n    util.log('Attempting reconnection to server with ID ' + this._lastServerId);\n    this.disconnected = false;\n    this._initializeServerConnection();\n    this._initialize(this._lastServerId);\n  } else if (this.destroyed) {\n    throw new Error('This peer cannot reconnect to the server. It has already been destroyed.');\n  } else if (!this.disconnected && !this.open) {\n    // Do nothing. We're still connecting the first time.\n    util.error('In a hurry? We\\'re still trying to make the initial connection!');\n  } else {\n    throw new Error('Peer ' + this.id + ' cannot reconnect because it is not disconnected from the server!');\n  }\n};\n\n/**\n * Get a list of available peer IDs. If you're running your own server, you'll\n * want to set allow_discovery: true in the PeerServer options. If you're using\n * the cloud server, email team@peerjs.com to get the functionality enabled for\n * your key.\n */\nPeer.prototype.listAllPeers = function(cb) {\n  cb = cb || function() {};\n  var self = this;\n  var http = new XMLHttpRequest();\n  var protocol = this.options.secure ? 'https://' : 'http://';\n  var url = protocol + this.options.host + ':' + this.options.port +\n    this.options.path + this.options.key + '/peers';\n  var queryString = '?ts=' + new Date().getTime() + '' + Math.random();\n  url += queryString;\n\n  // If there's no ID we need to wait for one before trying to init socket.\n  http.open('get', url, true);\n  http.onerror = function(e) {\n    self._abort('server-error', 'Could not get peers from the server.');\n    cb([]);\n  };\n  http.onreadystatechange = function() {\n    if (http.readyState !== 4) {\n      return;\n    }\n    if (http.status === 401) {\n      var helpfulError = '';\n      if (self.options.host !== util.CLOUD_HOST) {\n        helpfulError = 'It looks like you\\'re using the cloud server. You can email ' +\n          'team@peerjs.com to enable peer listing for your API key.';\n      } else {\n        helpfulError = 'You need to enable `allow_discovery` on your self-hosted ' +\n          'PeerServer to use this feature.';\n      }\n      cb([]);\n      throw new Error('It doesn\\'t look like you have permission to list peers IDs. ' + helpfulError);\n    } else if (http.status !== 200) {\n      cb([]);\n    } else {\n      cb(JSON.parse(http.responseText));\n    }\n  };\n  http.send(null);\n};\n\nmodule.exports = Peer;\n",
    "deps": {
      "eventemitter3": 20,
      "./socket": 18,
      "./mediaconnection": 15,
      "./util": 19,
      "./dataconnection": 14
    },
    "hash": "a892153a2255c27af547c048085c1290"
  },
  "18": {
    "id": 18,
    "index": 18,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/peerjs/lib/socket.js",
    "source": "var util = require('./util');\nvar EventEmitter = require('eventemitter3');\n\n/**\n * An abstraction on top of WebSockets and XHR streaming to provide fastest\n * possible connection for peers.\n */\nfunction Socket(secure, host, port, path, key) {\n  if (!(this instanceof Socket)) return new Socket(secure, host, port, path, key);\n\n  EventEmitter.call(this);\n\n  // Disconnected manually.\n  this.disconnected = false;\n  this._queue = [];\n\n  var httpProtocol = secure ? 'https://' : 'http://';\n  var wsProtocol = secure ? 'wss://' : 'ws://';\n  this._httpUrl = httpProtocol + host + ':' + port + path + key;\n  this._wsUrl = wsProtocol + host + ':' + port + path + 'peerjs?key=' + key;\n}\n\nutil.inherits(Socket, EventEmitter);\n\n\n/** Check in with ID or get one from server. */\nSocket.prototype.start = function(id, token) {\n  this.id = id;\n\n  this._httpUrl += '/' + id + '/' + token;\n  this._wsUrl += '&id=' + id + '&token=' + token;\n\n  this._startXhrStream();\n  this._startWebSocket();\n}\n\n\n/** Start up websocket communications. */\nSocket.prototype._startWebSocket = function(id) {\n  var self = this;\n\n  if (this._socket) {\n    return;\n  }\n\n  this._socket = new WebSocket(this._wsUrl);\n\n  this._socket.onmessage = function(event) {\n    try {\n      var data = JSON.parse(event.data);\n    } catch(e) {\n      util.log('Invalid server message', event.data);\n      return;\n    }\n    self.emit('message', data);\n  };\n\n  this._socket.onclose = function(event) {\n    util.log('Socket closed.');\n    self.disconnected = true;\n    self.emit('disconnected');\n  };\n\n  // Take care of the queue of connections if necessary and make sure Peer knows\n  // socket is open.\n  this._socket.onopen = function() {\n    if (self._timeout) {\n      clearTimeout(self._timeout);\n      setTimeout(function(){\n        self._http.abort();\n        self._http = null;\n      }, 5000);\n    }\n    self._sendQueuedMessages();\n    util.log('Socket open');\n  };\n}\n\n/** Start XHR streaming. */\nSocket.prototype._startXhrStream = function(n) {\n  try {\n    var self = this;\n    this._http = new XMLHttpRequest();\n    this._http._index = 1;\n    this._http._streamIndex = n || 0;\n    this._http.open('post', this._httpUrl + '/id?i=' + this._http._streamIndex, true);\n    this._http.onerror = function() {\n      // If we get an error, likely something went wrong.\n      // Stop streaming.\n      clearTimeout(self._timeout);\n      self.emit('disconnected');\n    }\n    this._http.onreadystatechange = function() {\n      if (this.readyState == 2 && this.old) {\n        this.old.abort();\n        delete this.old;\n      } else if (this.readyState > 2 && this.status === 200 && this.responseText) {\n        self._handleStream(this);\n      }\n    };\n    this._http.send(null);\n    this._setHTTPTimeout();\n  } catch(e) {\n    util.log('XMLHttpRequest not available; defaulting to WebSockets');\n  }\n}\n\n\n/** Handles onreadystatechange response as a stream. */\nSocket.prototype._handleStream = function(http) {\n  // 3 and 4 are loading/done state. All others are not relevant.\n  var messages = http.responseText.split('\\n');\n\n  // Check to see if anything needs to be processed on buffer.\n  if (http._buffer) {\n    while (http._buffer.length > 0) {\n      var index = http._buffer.shift();\n      var bufferedMessage = messages[index];\n      try {\n        bufferedMessage = JSON.parse(bufferedMessage);\n      } catch(e) {\n        http._buffer.shift(index);\n        break;\n      }\n      this.emit('message', bufferedMessage);\n    }\n  }\n\n  var message = messages[http._index];\n  if (message) {\n    http._index += 1;\n    // Buffering--this message is incomplete and we'll get to it next time.\n    // This checks if the httpResponse ended in a `\\n`, in which case the last\n    // element of messages should be the empty string.\n    if (http._index === messages.length) {\n      if (!http._buffer) {\n        http._buffer = [];\n      }\n      http._buffer.push(http._index - 1);\n    } else {\n      try {\n        message = JSON.parse(message);\n      } catch(e) {\n        util.log('Invalid server message', message);\n        return;\n      }\n      this.emit('message', message);\n    }\n  }\n}\n\nSocket.prototype._setHTTPTimeout = function() {\n  var self = this;\n  this._timeout = setTimeout(function() {\n    var old = self._http;\n    if (!self._wsOpen()) {\n      self._startXhrStream(old._streamIndex + 1);\n      self._http.old = old;\n    } else {\n      old.abort();\n    }\n  }, 25000);\n}\n\n/** Is the websocket currently open? */\nSocket.prototype._wsOpen = function() {\n  return this._socket && this._socket.readyState == 1;\n}\n\n/** Send queued messages. */\nSocket.prototype._sendQueuedMessages = function() {\n  for (var i = 0, ii = this._queue.length; i < ii; i += 1) {\n    this.send(this._queue[i]);\n  }\n}\n\n/** Exposed send for DC & Peer. */\nSocket.prototype.send = function(data) {\n  if (this.disconnected) {\n    return;\n  }\n\n  // If we didn't get an ID yet, we can't yet send anything so we should queue\n  // up these messages.\n  if (!this.id) {\n    this._queue.push(data);\n    return;\n  }\n\n  if (!data.type) {\n    this.emit('error', 'Invalid message');\n    return;\n  }\n\n  var message = JSON.stringify(data);\n  if (this._wsOpen()) {\n    this._socket.send(message);\n  } else {\n    var http = new XMLHttpRequest();\n    var url = this._httpUrl + '/' + data.type.toLowerCase();\n    http.open('post', url, true);\n    http.setRequestHeader('Content-Type', 'application/json');\n    http.send(message);\n  }\n}\n\nSocket.prototype.close = function() {\n  if (!this.disconnected && this._wsOpen()) {\n    this._socket.close();\n    this.disconnected = true;\n  }\n}\n\nmodule.exports = Socket;\n",
    "deps": {
      "./util": 19,
      "eventemitter3": 20
    },
    "hash": "5702661de3e2447a6ca46f83c55fa1d2"
  },
  "19": {
    "id": 19,
    "index": 19,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/peerjs/lib/util.js",
    "source": "var defaultConfig = {'iceServers': [{ 'url': 'stun:stun.l.google.com:19302' }]};\nvar dataCount = 1;\n\nvar BinaryPack = require('js-binarypack');\nvar RTCPeerConnection = require('./adapter').RTCPeerConnection;\n\nvar util = {\n  noop: function() {},\n\n  CLOUD_HOST: '0.peerjs.com',\n  CLOUD_PORT: 9000,\n\n  // Browsers that need chunking:\n  chunkedBrowsers: {'Chrome': 1},\n  chunkedMTU: 16300, // The original 60000 bytes setting does not work when sending data from Firefox to Chrome, which is \"cut off\" after 16384 bytes and delivered individually.\n\n  // Logging logic\n  logLevel: 0,\n  setLogLevel: function(level) {\n    var debugLevel = parseInt(level, 10);\n    if (!isNaN(parseInt(level, 10))) {\n      util.logLevel = debugLevel;\n    } else {\n      // If they are using truthy/falsy values for debug\n      util.logLevel = level ? 3 : 0;\n    }\n    util.log = util.warn = util.error = util.noop;\n    if (util.logLevel > 0) {\n      util.error = util._printWith('ERROR');\n    }\n    if (util.logLevel > 1) {\n      util.warn = util._printWith('WARNING');\n    }\n    if (util.logLevel > 2) {\n      util.log = util._print;\n    }\n  },\n  setLogFunction: function(fn) {\n    if (fn.constructor !== Function) {\n      util.warn('The log function you passed in is not a function. Defaulting to regular logs.');\n    } else {\n      util._print = fn;\n    }\n  },\n\n  _printWith: function(prefix) {\n    return function() {\n      var copy = Array.prototype.slice.call(arguments);\n      copy.unshift(prefix);\n      util._print.apply(util, copy);\n    };\n  },\n  _print: function () {\n    var err = false;\n    var copy = Array.prototype.slice.call(arguments);\n    copy.unshift('PeerJS: ');\n    for (var i = 0, l = copy.length; i < l; i++){\n      if (copy[i] instanceof Error) {\n        copy[i] = '(' + copy[i].name + ') ' + copy[i].message;\n        err = true;\n      }\n    }\n    err ? console.error.apply(console, copy) : console.log.apply(console, copy);\n  },\n  //\n\n  // Returns browser-agnostic default config\n  defaultConfig: defaultConfig,\n  //\n\n  // Returns the current browser.\n  browser: (function() {\n    if (window.mozRTCPeerConnection) {\n      return 'Firefox';\n    } else if (window.webkitRTCPeerConnection) {\n      return 'Chrome';\n    } else if (window.RTCPeerConnection) {\n      return 'Supported';\n    } else {\n      return 'Unsupported';\n    }\n  })(),\n  //\n\n  // Lists which features are supported\n  supports: (function() {\n    if (typeof RTCPeerConnection === 'undefined') {\n      return {};\n    }\n\n    var data = true;\n    var audioVideo = true;\n\n    var binaryBlob = false;\n    var sctp = false;\n    var onnegotiationneeded = !!window.webkitRTCPeerConnection;\n\n    var pc, dc;\n    try {\n      pc = new RTCPeerConnection(defaultConfig, {optional: [{RtpDataChannels: true}]});\n    } catch (e) {\n      data = false;\n      audioVideo = false;\n    }\n\n    if (data) {\n      try {\n        dc = pc.createDataChannel('_PEERJSTEST');\n      } catch (e) {\n        data = false;\n      }\n    }\n\n    if (data) {\n      // Binary test\n      try {\n        dc.binaryType = 'blob';\n        binaryBlob = true;\n      } catch (e) {\n      }\n\n      // Reliable test.\n      // Unfortunately Chrome is a bit unreliable about whether or not they\n      // support reliable.\n      var reliablePC = new RTCPeerConnection(defaultConfig, {});\n      try {\n        var reliableDC = reliablePC.createDataChannel('_PEERJSRELIABLETEST', {});\n        sctp = reliableDC.reliable;\n      } catch (e) {\n      }\n      reliablePC.close();\n    }\n\n    // FIXME: not really the best check...\n    if (audioVideo) {\n      audioVideo = !!pc.addStream;\n    }\n\n    // FIXME: this is not great because in theory it doesn't work for\n    // av-only browsers (?).\n    if (!onnegotiationneeded && data) {\n      // sync default check.\n      var negotiationPC = new RTCPeerConnection(defaultConfig, {optional: [{RtpDataChannels: true}]});\n      negotiationPC.onnegotiationneeded = function() {\n        onnegotiationneeded = true;\n        // async check.\n        if (util && util.supports) {\n          util.supports.onnegotiationneeded = true;\n        }\n      };\n      negotiationPC.createDataChannel('_PEERJSNEGOTIATIONTEST');\n\n      setTimeout(function() {\n        negotiationPC.close();\n      }, 1000);\n    }\n\n    if (pc) {\n      pc.close();\n    }\n\n    return {\n      audioVideo: audioVideo,\n      data: data,\n      binaryBlob: binaryBlob,\n      binary: sctp, // deprecated; sctp implies binary support.\n      reliable: sctp, // deprecated; sctp implies reliable data.\n      sctp: sctp,\n      onnegotiationneeded: onnegotiationneeded\n    };\n  }()),\n  //\n\n  // Ensure alphanumeric ids\n  validateId: function(id) {\n    // Allow empty ids\n    return !id || /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.exec(id);\n  },\n\n  validateKey: function(key) {\n    // Allow empty keys\n    return !key || /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.exec(key);\n  },\n\n\n  debug: false,\n\n  inherits: function(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  },\n  extend: function(dest, source) {\n    for(var key in source) {\n      if(source.hasOwnProperty(key)) {\n        dest[key] = source[key];\n      }\n    }\n    return dest;\n  },\n  pack: BinaryPack.pack,\n  unpack: BinaryPack.unpack,\n\n  log: function () {\n    if (util.debug) {\n      var err = false;\n      var copy = Array.prototype.slice.call(arguments);\n      copy.unshift('PeerJS: ');\n      for (var i = 0, l = copy.length; i < l; i++){\n        if (copy[i] instanceof Error) {\n          copy[i] = '(' + copy[i].name + ') ' + copy[i].message;\n          err = true;\n        }\n      }\n      err ? console.error.apply(console, copy) : console.log.apply(console, copy);\n    }\n  },\n\n  setZeroTimeout: (function(global) {\n    var timeouts = [];\n    var messageName = 'zero-timeout-message';\n\n    // Like setTimeout, but only takes a function argument.\t There's\n    // no time argument (always zero) and no arguments (you have to\n    // use a closure).\n    function setZeroTimeoutPostMessage(fn) {\n      timeouts.push(fn);\n      global.postMessage(messageName, '*');\n    }\n\n    function handleMessage(event) {\n      if (event.source == global && event.data == messageName) {\n        if (event.stopPropagation) {\n          event.stopPropagation();\n        }\n        if (timeouts.length) {\n          timeouts.shift()();\n        }\n      }\n    }\n    if (global.addEventListener) {\n      global.addEventListener('message', handleMessage, true);\n    } else if (global.attachEvent) {\n      global.attachEvent('onmessage', handleMessage);\n    }\n    return setZeroTimeoutPostMessage;\n  }(window)),\n\n  // Binary stuff\n\n  // chunks a blob.\n  chunk: function(bl) {\n    var chunks = [];\n    var size = bl.size;\n    var start = index = 0;\n    var total = Math.ceil(size / util.chunkedMTU);\n    while (start < size) {\n      var end = Math.min(size, start + util.chunkedMTU);\n      var b = bl.slice(start, end);\n\n      var chunk = {\n        __peerData: dataCount,\n        n: index,\n        data: b,\n        total: total\n      };\n\n      chunks.push(chunk);\n\n      start = end;\n      index += 1;\n    }\n    dataCount += 1;\n    return chunks;\n  },\n\n  blobToArrayBuffer: function(blob, cb){\n    var fr = new FileReader();\n    fr.onload = function(evt) {\n      cb(evt.target.result);\n    };\n    fr.readAsArrayBuffer(blob);\n  },\n  blobToBinaryString: function(blob, cb){\n    var fr = new FileReader();\n    fr.onload = function(evt) {\n      cb(evt.target.result);\n    };\n    fr.readAsBinaryString(blob);\n  },\n  binaryStringToArrayBuffer: function(binary) {\n    var byteArray = new Uint8Array(binary.length);\n    for (var i = 0; i < binary.length; i++) {\n      byteArray[i] = binary.charCodeAt(i) & 0xff;\n    }\n    return byteArray.buffer;\n  },\n  randomToken: function () {\n    return Math.random().toString(36).substr(2);\n  },\n  //\n\n  isSecure: function() {\n    return location.protocol === 'https:';\n  }\n};\n\nmodule.exports = util;\n",
    "deps": {
      "./adapter": 13,
      "js-binarypack": 21
    },
    "hash": "8e44db3cde541b481c704e0df9496d01"
  },
  "20": {
    "id": 20,
    "index": 20,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/peerjs/node_modules/eventemitter3/index.js",
    "source": "'use strict';\n\n/**\n * Representation of a single EventEmitter function.\n *\n * @param {Function} fn Event handler to be called.\n * @param {Mixed} context Context for function execution.\n * @param {Boolean} once Only emit once\n * @api private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Minimal EventEmitter interface that is molded against the Node.js\n * EventEmitter interface.\n *\n * @constructor\n * @api public\n */\nfunction EventEmitter() { /* Nothing to set */ }\n\n/**\n * Holds the assigned EventEmitters by name.\n *\n * @type {Object}\n * @private\n */\nEventEmitter.prototype._events = undefined;\n\n/**\n * Return a list of assigned event listeners.\n *\n * @param {String} event The events that should be listed.\n * @returns {Array}\n * @api public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  if (!this._events || !this._events[event]) return [];\n  if (this._events[event].fn) return [this._events[event].fn];\n\n  for (var i = 0, l = this._events[event].length, ee = new Array(l); i < l; i++) {\n    ee[i] = this._events[event][i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Emit an event to all registered event listeners.\n *\n * @param {String} event The name of the event.\n * @returns {Boolean} Indication if we've emitted an event.\n * @api public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  if (!this._events || !this._events[event]) return false;\n\n  var listeners = this._events[event]\n    , len = arguments.length\n    , args\n    , i;\n\n  if ('function' === typeof listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Register a new EventListener for the given event.\n *\n * @param {String} event Name of the event.\n * @param {Functon} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  var listener = new EE(fn, context || this);\n\n  if (!this._events) this._events = {};\n  if (!this._events[event]) this._events[event] = listener;\n  else {\n    if (!this._events[event].fn) this._events[event].push(listener);\n    else this._events[event] = [\n      this._events[event], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Add an EventListener that's only called once.\n *\n * @param {String} event Name of the event.\n * @param {Function} fn Callback function.\n * @param {Mixed} context The context of the function.\n * @api public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  var listener = new EE(fn, context || this, true);\n\n  if (!this._events) this._events = {};\n  if (!this._events[event]) this._events[event] = listener;\n  else {\n    if (!this._events[event].fn) this._events[event].push(listener);\n    else this._events[event] = [\n      this._events[event], listener\n    ];\n  }\n\n  return this;\n};\n\n/**\n * Remove event listeners.\n *\n * @param {String} event The event we want to remove.\n * @param {Function} fn The listener that we need to find.\n * @param {Boolean} once Only remove once listeners.\n * @api public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, once) {\n  if (!this._events || !this._events[event]) return this;\n\n  var listeners = this._events[event]\n    , events = [];\n\n  if (fn) {\n    if (listeners.fn && (listeners.fn !== fn || (once && !listeners.once))) {\n      events.push(listeners);\n    }\n    if (!listeners.fn) for (var i = 0, length = listeners.length; i < length; i++) {\n      if (listeners[i].fn !== fn || (once && !listeners[i].once)) {\n        events.push(listeners[i]);\n      }\n    }\n  }\n\n  //\n  // Reset the array, or remove it completely if we have no more listeners.\n  //\n  if (events.length) {\n    this._events[event] = events.length === 1 ? events[0] : events;\n  } else {\n    delete this._events[event];\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners or only the listeners for the specified event.\n *\n * @param {String} event The event want to remove all listeners for.\n * @api public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  if (!this._events) return this;\n\n  if (event) delete this._events[event];\n  else this._events = {};\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// This function doesn't apply anymore.\n//\nEventEmitter.prototype.setMaxListeners = function setMaxListeners() {\n  return this;\n};\n\n//\n// Expose the module.\n//\nEventEmitter.EventEmitter = EventEmitter;\nEventEmitter.EventEmitter2 = EventEmitter;\nEventEmitter.EventEmitter3 = EventEmitter;\n\n//\n// Expose the module.\n//\nmodule.exports = EventEmitter;\n",
    "deps": {},
    "hash": "503c5f44552c2068482c7676ca8fab60"
  },
  "21": {
    "id": 21,
    "index": 21,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/peerjs/node_modules/js-binarypack/lib/binarypack.js",
    "source": "var BufferBuilder = require('./bufferbuilder').BufferBuilder;\r\nvar binaryFeatures = require('./bufferbuilder').binaryFeatures;\r\n\r\nvar BinaryPack = {\r\n  unpack: function(data){\r\n    var unpacker = new Unpacker(data);\r\n    return unpacker.unpack();\r\n  },\r\n  pack: function(data){\r\n    var packer = new Packer();\r\n    packer.pack(data);\r\n    var buffer = packer.getBuffer();\r\n    return buffer;\r\n  }\r\n};\r\n\r\nmodule.exports = BinaryPack;\r\n\r\nfunction Unpacker (data){\r\n  // Data is ArrayBuffer\r\n  this.index = 0;\r\n  this.dataBuffer = data;\r\n  this.dataView = new Uint8Array(this.dataBuffer);\r\n  this.length = this.dataBuffer.byteLength;\r\n}\r\n\r\nUnpacker.prototype.unpack = function(){\r\n  var type = this.unpack_uint8();\r\n  if (type < 0x80){\r\n    var positive_fixnum = type;\r\n    return positive_fixnum;\r\n  } else if ((type ^ 0xe0) < 0x20){\r\n    var negative_fixnum = (type ^ 0xe0) - 0x20;\r\n    return negative_fixnum;\r\n  }\r\n  var size;\r\n  if ((size = type ^ 0xa0) <= 0x0f){\r\n    return this.unpack_raw(size);\r\n  } else if ((size = type ^ 0xb0) <= 0x0f){\r\n    return this.unpack_string(size);\r\n  } else if ((size = type ^ 0x90) <= 0x0f){\r\n    return this.unpack_array(size);\r\n  } else if ((size = type ^ 0x80) <= 0x0f){\r\n    return this.unpack_map(size);\r\n  }\r\n  switch(type){\r\n    case 0xc0:\r\n      return null;\r\n    case 0xc1:\r\n      return undefined;\r\n    case 0xc2:\r\n      return false;\r\n    case 0xc3:\r\n      return true;\r\n    case 0xca:\r\n      return this.unpack_float();\r\n    case 0xcb:\r\n      return this.unpack_double();\r\n    case 0xcc:\r\n      return this.unpack_uint8();\r\n    case 0xcd:\r\n      return this.unpack_uint16();\r\n    case 0xce:\r\n      return this.unpack_uint32();\r\n    case 0xcf:\r\n      return this.unpack_uint64();\r\n    case 0xd0:\r\n      return this.unpack_int8();\r\n    case 0xd1:\r\n      return this.unpack_int16();\r\n    case 0xd2:\r\n      return this.unpack_int32();\r\n    case 0xd3:\r\n      return this.unpack_int64();\r\n    case 0xd4:\r\n      return undefined;\r\n    case 0xd5:\r\n      return undefined;\r\n    case 0xd6:\r\n      return undefined;\r\n    case 0xd7:\r\n      return undefined;\r\n    case 0xd8:\r\n      size = this.unpack_uint16();\r\n      return this.unpack_string(size);\r\n    case 0xd9:\r\n      size = this.unpack_uint32();\r\n      return this.unpack_string(size);\r\n    case 0xda:\r\n      size = this.unpack_uint16();\r\n      return this.unpack_raw(size);\r\n    case 0xdb:\r\n      size = this.unpack_uint32();\r\n      return this.unpack_raw(size);\r\n    case 0xdc:\r\n      size = this.unpack_uint16();\r\n      return this.unpack_array(size);\r\n    case 0xdd:\r\n      size = this.unpack_uint32();\r\n      return this.unpack_array(size);\r\n    case 0xde:\r\n      size = this.unpack_uint16();\r\n      return this.unpack_map(size);\r\n    case 0xdf:\r\n      size = this.unpack_uint32();\r\n      return this.unpack_map(size);\r\n  }\r\n}\r\n\r\nUnpacker.prototype.unpack_uint8 = function(){\r\n  var byte = this.dataView[this.index] & 0xff;\r\n  this.index++;\r\n  return byte;\r\n};\r\n\r\nUnpacker.prototype.unpack_uint16 = function(){\r\n  var bytes = this.read(2);\r\n  var uint16 =\r\n    ((bytes[0] & 0xff) * 256) + (bytes[1] & 0xff);\r\n  this.index += 2;\r\n  return uint16;\r\n}\r\n\r\nUnpacker.prototype.unpack_uint32 = function(){\r\n  var bytes = this.read(4);\r\n  var uint32 =\r\n     ((bytes[0]  * 256 +\r\n       bytes[1]) * 256 +\r\n       bytes[2]) * 256 +\r\n       bytes[3];\r\n  this.index += 4;\r\n  return uint32;\r\n}\r\n\r\nUnpacker.prototype.unpack_uint64 = function(){\r\n  var bytes = this.read(8);\r\n  var uint64 =\r\n   ((((((bytes[0]  * 256 +\r\n       bytes[1]) * 256 +\r\n       bytes[2]) * 256 +\r\n       bytes[3]) * 256 +\r\n       bytes[4]) * 256 +\r\n       bytes[5]) * 256 +\r\n       bytes[6]) * 256 +\r\n       bytes[7];\r\n  this.index += 8;\r\n  return uint64;\r\n}\r\n\r\n\r\nUnpacker.prototype.unpack_int8 = function(){\r\n  var uint8 = this.unpack_uint8();\r\n  return (uint8 < 0x80 ) ? uint8 : uint8 - (1 << 8);\r\n};\r\n\r\nUnpacker.prototype.unpack_int16 = function(){\r\n  var uint16 = this.unpack_uint16();\r\n  return (uint16 < 0x8000 ) ? uint16 : uint16 - (1 << 16);\r\n}\r\n\r\nUnpacker.prototype.unpack_int32 = function(){\r\n  var uint32 = this.unpack_uint32();\r\n  return (uint32 < Math.pow(2, 31) ) ? uint32 :\r\n    uint32 - Math.pow(2, 32);\r\n}\r\n\r\nUnpacker.prototype.unpack_int64 = function(){\r\n  var uint64 = this.unpack_uint64();\r\n  return (uint64 < Math.pow(2, 63) ) ? uint64 :\r\n    uint64 - Math.pow(2, 64);\r\n}\r\n\r\nUnpacker.prototype.unpack_raw = function(size){\r\n  if ( this.length < this.index + size){\r\n    throw new Error('BinaryPackFailure: index is out of range'\r\n      + ' ' + this.index + ' ' + size + ' ' + this.length);\r\n  }\r\n  var buf = this.dataBuffer.slice(this.index, this.index + size);\r\n  this.index += size;\r\n\r\n    //buf = util.bufferToString(buf);\r\n\r\n  return buf;\r\n}\r\n\r\nUnpacker.prototype.unpack_string = function(size){\r\n  var bytes = this.read(size);\r\n  var i = 0, str = '', c, code;\r\n  while(i < size){\r\n    c = bytes[i];\r\n    if ( c < 128){\r\n      str += String.fromCharCode(c);\r\n      i++;\r\n    } else if ((c ^ 0xc0) < 32){\r\n      code = ((c ^ 0xc0) << 6) | (bytes[i+1] & 63);\r\n      str += String.fromCharCode(code);\r\n      i += 2;\r\n    } else {\r\n      code = ((c & 15) << 12) | ((bytes[i+1] & 63) << 6) |\r\n        (bytes[i+2] & 63);\r\n      str += String.fromCharCode(code);\r\n      i += 3;\r\n    }\r\n  }\r\n  this.index += size;\r\n  return str;\r\n}\r\n\r\nUnpacker.prototype.unpack_array = function(size){\r\n  var objects = new Array(size);\r\n  for(var i = 0; i < size ; i++){\r\n    objects[i] = this.unpack();\r\n  }\r\n  return objects;\r\n}\r\n\r\nUnpacker.prototype.unpack_map = function(size){\r\n  var map = {};\r\n  for(var i = 0; i < size ; i++){\r\n    var key  = this.unpack();\r\n    var value = this.unpack();\r\n    map[key] = value;\r\n  }\r\n  return map;\r\n}\r\n\r\nUnpacker.prototype.unpack_float = function(){\r\n  var uint32 = this.unpack_uint32();\r\n  var sign = uint32 >> 31;\r\n  var exp  = ((uint32 >> 23) & 0xff) - 127;\r\n  var fraction = ( uint32 & 0x7fffff ) | 0x800000;\r\n  return (sign == 0 ? 1 : -1) *\r\n    fraction * Math.pow(2, exp - 23);\r\n}\r\n\r\nUnpacker.prototype.unpack_double = function(){\r\n  var h32 = this.unpack_uint32();\r\n  var l32 = this.unpack_uint32();\r\n  var sign = h32 >> 31;\r\n  var exp  = ((h32 >> 20) & 0x7ff) - 1023;\r\n  var hfrac = ( h32 & 0xfffff ) | 0x100000;\r\n  var frac = hfrac * Math.pow(2, exp - 20) +\r\n    l32   * Math.pow(2, exp - 52);\r\n  return (sign == 0 ? 1 : -1) * frac;\r\n}\r\n\r\nUnpacker.prototype.read = function(length){\r\n  var j = this.index;\r\n  if (j + length <= this.length) {\r\n    return this.dataView.subarray(j, j + length);\r\n  } else {\r\n    throw new Error('BinaryPackFailure: read index out of range');\r\n  }\r\n}\r\n\r\nfunction Packer(){\r\n  this.bufferBuilder = new BufferBuilder();\r\n}\r\n\r\nPacker.prototype.getBuffer = function(){\r\n  return this.bufferBuilder.getBuffer();\r\n}\r\n\r\nPacker.prototype.pack = function(value){\r\n  var type = typeof(value);\r\n  if (type == 'string'){\r\n    this.pack_string(value);\r\n  } else if (type == 'number'){\r\n    if (Math.floor(value) === value){\r\n      this.pack_integer(value);\r\n    } else{\r\n      this.pack_double(value);\r\n    }\r\n  } else if (type == 'boolean'){\r\n    if (value === true){\r\n      this.bufferBuilder.append(0xc3);\r\n    } else if (value === false){\r\n      this.bufferBuilder.append(0xc2);\r\n    }\r\n  } else if (type == 'undefined'){\r\n    this.bufferBuilder.append(0xc0);\r\n  } else if (type == 'object'){\r\n    if (value === null){\r\n      this.bufferBuilder.append(0xc0);\r\n    } else {\r\n      var constructor = value.constructor;\r\n      if (constructor == Array){\r\n        this.pack_array(value);\r\n      } else if (constructor == Blob || constructor == File) {\r\n        this.pack_bin(value);\r\n      } else if (constructor == ArrayBuffer) {\r\n        if(binaryFeatures.useArrayBufferView) {\r\n          this.pack_bin(new Uint8Array(value));\r\n        } else {\r\n          this.pack_bin(value);\r\n        }\r\n      } else if ('BYTES_PER_ELEMENT' in value){\r\n        if(binaryFeatures.useArrayBufferView) {\r\n          this.pack_bin(new Uint8Array(value.buffer));\r\n        } else {\r\n          this.pack_bin(value.buffer);\r\n        }\r\n      } else if (constructor == Object){\r\n        this.pack_object(value);\r\n      } else if (constructor == Date){\r\n        this.pack_string(value.toString());\r\n      } else if (typeof value.toBinaryPack == 'function'){\r\n        this.bufferBuilder.append(value.toBinaryPack());\r\n      } else {\r\n        throw new Error('Type \"' + constructor.toString() + '\" not yet supported');\r\n      }\r\n    }\r\n  } else {\r\n    throw new Error('Type \"' + type + '\" not yet supported');\r\n  }\r\n  this.bufferBuilder.flush();\r\n}\r\n\r\n\r\nPacker.prototype.pack_bin = function(blob){\r\n  var length = blob.length || blob.byteLength || blob.size;\r\n  if (length <= 0x0f){\r\n    this.pack_uint8(0xa0 + length);\r\n  } else if (length <= 0xffff){\r\n    this.bufferBuilder.append(0xda) ;\r\n    this.pack_uint16(length);\r\n  } else if (length <= 0xffffffff){\r\n    this.bufferBuilder.append(0xdb);\r\n    this.pack_uint32(length);\r\n  } else{\r\n    throw new Error('Invalid length');\r\n  }\r\n  this.bufferBuilder.append(blob);\r\n}\r\n\r\nPacker.prototype.pack_string = function(str){\r\n  var length = utf8Length(str);\r\n\r\n  if (length <= 0x0f){\r\n    this.pack_uint8(0xb0 + length);\r\n  } else if (length <= 0xffff){\r\n    this.bufferBuilder.append(0xd8) ;\r\n    this.pack_uint16(length);\r\n  } else if (length <= 0xffffffff){\r\n    this.bufferBuilder.append(0xd9);\r\n    this.pack_uint32(length);\r\n  } else{\r\n    throw new Error('Invalid length');\r\n  }\r\n  this.bufferBuilder.append(str);\r\n}\r\n\r\nPacker.prototype.pack_array = function(ary){\r\n  var length = ary.length;\r\n  if (length <= 0x0f){\r\n    this.pack_uint8(0x90 + length);\r\n  } else if (length <= 0xffff){\r\n    this.bufferBuilder.append(0xdc)\r\n    this.pack_uint16(length);\r\n  } else if (length <= 0xffffffff){\r\n    this.bufferBuilder.append(0xdd);\r\n    this.pack_uint32(length);\r\n  } else{\r\n    throw new Error('Invalid length');\r\n  }\r\n  for(var i = 0; i < length ; i++){\r\n    this.pack(ary[i]);\r\n  }\r\n}\r\n\r\nPacker.prototype.pack_integer = function(num){\r\n  if ( -0x20 <= num && num <= 0x7f){\r\n    this.bufferBuilder.append(num & 0xff);\r\n  } else if (0x00 <= num && num <= 0xff){\r\n    this.bufferBuilder.append(0xcc);\r\n    this.pack_uint8(num);\r\n  } else if (-0x80 <= num && num <= 0x7f){\r\n    this.bufferBuilder.append(0xd0);\r\n    this.pack_int8(num);\r\n  } else if ( 0x0000 <= num && num <= 0xffff){\r\n    this.bufferBuilder.append(0xcd);\r\n    this.pack_uint16(num);\r\n  } else if (-0x8000 <= num && num <= 0x7fff){\r\n    this.bufferBuilder.append(0xd1);\r\n    this.pack_int16(num);\r\n  } else if ( 0x00000000 <= num && num <= 0xffffffff){\r\n    this.bufferBuilder.append(0xce);\r\n    this.pack_uint32(num);\r\n  } else if (-0x80000000 <= num && num <= 0x7fffffff){\r\n    this.bufferBuilder.append(0xd2);\r\n    this.pack_int32(num);\r\n  } else if (-0x8000000000000000 <= num && num <= 0x7FFFFFFFFFFFFFFF){\r\n    this.bufferBuilder.append(0xd3);\r\n    this.pack_int64(num);\r\n  } else if (0x0000000000000000 <= num && num <= 0xFFFFFFFFFFFFFFFF){\r\n    this.bufferBuilder.append(0xcf);\r\n    this.pack_uint64(num);\r\n  } else{\r\n    throw new Error('Invalid integer');\r\n  }\r\n}\r\n\r\nPacker.prototype.pack_double = function(num){\r\n  var sign = 0;\r\n  if (num < 0){\r\n    sign = 1;\r\n    num = -num;\r\n  }\r\n  var exp  = Math.floor(Math.log(num) / Math.LN2);\r\n  var frac0 = num / Math.pow(2, exp) - 1;\r\n  var frac1 = Math.floor(frac0 * Math.pow(2, 52));\r\n  var b32   = Math.pow(2, 32);\r\n  var h32 = (sign << 31) | ((exp+1023) << 20) |\r\n      (frac1 / b32) & 0x0fffff;\r\n  var l32 = frac1 % b32;\r\n  this.bufferBuilder.append(0xcb);\r\n  this.pack_int32(h32);\r\n  this.pack_int32(l32);\r\n}\r\n\r\nPacker.prototype.pack_object = function(obj){\r\n  var keys = Object.keys(obj);\r\n  var length = keys.length;\r\n  if (length <= 0x0f){\r\n    this.pack_uint8(0x80 + length);\r\n  } else if (length <= 0xffff){\r\n    this.bufferBuilder.append(0xde);\r\n    this.pack_uint16(length);\r\n  } else if (length <= 0xffffffff){\r\n    this.bufferBuilder.append(0xdf);\r\n    this.pack_uint32(length);\r\n  } else{\r\n    throw new Error('Invalid length');\r\n  }\r\n  for(var prop in obj){\r\n    if (obj.hasOwnProperty(prop)){\r\n      this.pack(prop);\r\n      this.pack(obj[prop]);\r\n    }\r\n  }\r\n}\r\n\r\nPacker.prototype.pack_uint8 = function(num){\r\n  this.bufferBuilder.append(num);\r\n}\r\n\r\nPacker.prototype.pack_uint16 = function(num){\r\n  this.bufferBuilder.append(num >> 8);\r\n  this.bufferBuilder.append(num & 0xff);\r\n}\r\n\r\nPacker.prototype.pack_uint32 = function(num){\r\n  var n = num & 0xffffffff;\r\n  this.bufferBuilder.append((n & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((n & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((n & 0x0000ff00) >>>  8);\r\n  this.bufferBuilder.append((n & 0x000000ff));\r\n}\r\n\r\nPacker.prototype.pack_uint64 = function(num){\r\n  var high = num / Math.pow(2, 32);\r\n  var low  = num % Math.pow(2, 32);\r\n  this.bufferBuilder.append((high & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((high & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((high & 0x0000ff00) >>>  8);\r\n  this.bufferBuilder.append((high & 0x000000ff));\r\n  this.bufferBuilder.append((low  & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((low  & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((low  & 0x0000ff00) >>>  8);\r\n  this.bufferBuilder.append((low  & 0x000000ff));\r\n}\r\n\r\nPacker.prototype.pack_int8 = function(num){\r\n  this.bufferBuilder.append(num & 0xff);\r\n}\r\n\r\nPacker.prototype.pack_int16 = function(num){\r\n  this.bufferBuilder.append((num & 0xff00) >> 8);\r\n  this.bufferBuilder.append(num & 0xff);\r\n}\r\n\r\nPacker.prototype.pack_int32 = function(num){\r\n  this.bufferBuilder.append((num >>> 24) & 0xff);\r\n  this.bufferBuilder.append((num & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((num & 0x0000ff00) >>> 8);\r\n  this.bufferBuilder.append((num & 0x000000ff));\r\n}\r\n\r\nPacker.prototype.pack_int64 = function(num){\r\n  var high = Math.floor(num / Math.pow(2, 32));\r\n  var low  = num % Math.pow(2, 32);\r\n  this.bufferBuilder.append((high & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((high & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((high & 0x0000ff00) >>>  8);\r\n  this.bufferBuilder.append((high & 0x000000ff));\r\n  this.bufferBuilder.append((low  & 0xff000000) >>> 24);\r\n  this.bufferBuilder.append((low  & 0x00ff0000) >>> 16);\r\n  this.bufferBuilder.append((low  & 0x0000ff00) >>>  8);\r\n  this.bufferBuilder.append((low  & 0x000000ff));\r\n}\r\n\r\nfunction _utf8Replace(m){\r\n  var code = m.charCodeAt(0);\r\n\r\n  if(code <= 0x7ff) return '00';\r\n  if(code <= 0xffff) return '000';\r\n  if(code <= 0x1fffff) return '0000';\r\n  if(code <= 0x3ffffff) return '00000';\r\n  return '000000';\r\n}\r\n\r\nfunction utf8Length(str){\r\n  if (str.length > 600) {\r\n    // Blob method faster for large strings\r\n    return (new Blob([str])).size;\r\n  } else {\r\n    return str.replace(/[^\\u0000-\\u007F]/g, _utf8Replace).length;\r\n  }\r\n}\r\n",
    "deps": {
      "./bufferbuilder": 22
    },
    "hash": "bbb463107a24ad1060b9061be3c9c0cd"
  },
  "22": {
    "id": 22,
    "index": 22,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/peerjs/node_modules/js-binarypack/lib/bufferbuilder.js",
    "source": "var binaryFeatures = {};\r\nbinaryFeatures.useBlobBuilder = (function(){\r\n  try {\r\n    new Blob([]);\r\n    return false;\r\n  } catch (e) {\r\n    return true;\r\n  }\r\n})();\r\n\r\nbinaryFeatures.useArrayBufferView = !binaryFeatures.useBlobBuilder && (function(){\r\n  try {\r\n    return (new Blob([new Uint8Array([])])).size === 0;\r\n  } catch (e) {\r\n    return true;\r\n  }\r\n})();\r\n\r\nmodule.exports.binaryFeatures = binaryFeatures;\r\nvar BlobBuilder = module.exports.BlobBuilder;\r\nif (typeof window != 'undefined') {\r\n  BlobBuilder = module.exports.BlobBuilder = window.WebKitBlobBuilder ||\r\n    window.MozBlobBuilder || window.MSBlobBuilder || window.BlobBuilder;\r\n}\r\n\r\nfunction BufferBuilder(){\r\n  this._pieces = [];\r\n  this._parts = [];\r\n}\r\n\r\nBufferBuilder.prototype.append = function(data) {\r\n  if(typeof data === 'number') {\r\n    this._pieces.push(data);\r\n  } else {\r\n    this.flush();\r\n    this._parts.push(data);\r\n  }\r\n};\r\n\r\nBufferBuilder.prototype.flush = function() {\r\n  if (this._pieces.length > 0) {\r\n    var buf = new Uint8Array(this._pieces);\r\n    if(!binaryFeatures.useArrayBufferView) {\r\n      buf = buf.buffer;\r\n    }\r\n    this._parts.push(buf);\r\n    this._pieces = [];\r\n  }\r\n};\r\n\r\nBufferBuilder.prototype.getBuffer = function() {\r\n  this.flush();\r\n  if(binaryFeatures.useBlobBuilder) {\r\n    var builder = new BlobBuilder();\r\n    for(var i = 0, ii = this._parts.length; i < ii; i++) {\r\n      builder.append(this._parts[i]);\r\n    }\r\n    return builder.getBlob();\r\n  } else {\r\n    return new Blob(this._parts);\r\n  }\r\n};\r\n\r\nmodule.exports.BufferBuilder = BufferBuilder;\r\n",
    "deps": {},
    "hash": "7fad0239974fed6fadff3168e082eaa7"
  },
  "23": {
    "id": 23,
    "index": 23,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/peerjs/node_modules/reliable/lib/reliable.js",
    "source": "var util = require('./util');\n\n/**\n * Reliable transfer for Chrome Canary DataChannel impl.\n * Author: @michellebu\n */\nfunction Reliable(dc, debug) {\n  if (!(this instanceof Reliable)) return new Reliable(dc);\n  this._dc = dc;\n\n  util.debug = debug;\n\n  // Messages sent/received so far.\n  // id: { ack: n, chunks: [...] }\n  this._outgoing = {};\n  // id: { ack: ['ack', id, n], chunks: [...] }\n  this._incoming = {};\n  this._received = {};\n\n  // Window size.\n  this._window = 1000;\n  // MTU.\n  this._mtu = 500;\n  // Interval for setInterval. In ms.\n  this._interval = 0;\n\n  // Messages sent.\n  this._count = 0;\n\n  // Outgoing message queue.\n  this._queue = [];\n\n  this._setupDC();\n};\n\n// Send a message reliably.\nReliable.prototype.send = function(msg) {\n  // Determine if chunking is necessary.\n  var bl = util.pack(msg);\n  if (bl.size < this._mtu) {\n    this._handleSend(['no', bl]);\n    return;\n  }\n\n  this._outgoing[this._count] = {\n    ack: 0,\n    chunks: this._chunk(bl)\n  };\n\n  if (util.debug) {\n    this._outgoing[this._count].timer = new Date();\n  }\n\n  // Send prelim window.\n  this._sendWindowedChunks(this._count);\n  this._count += 1;\n};\n\n// Set up interval for processing queue.\nReliable.prototype._setupInterval = function() {\n  // TODO: fail gracefully.\n\n  var self = this;\n  this._timeout = setInterval(function() {\n    // FIXME: String stuff makes things terribly async.\n    var msg = self._queue.shift();\n    if (msg._multiple) {\n      for (var i = 0, ii = msg.length; i < ii; i += 1) {\n        self._intervalSend(msg[i]);\n      }\n    } else {\n      self._intervalSend(msg);\n    }\n  }, this._interval);\n};\n\nReliable.prototype._intervalSend = function(msg) {\n  var self = this;\n  msg = util.pack(msg);\n  util.blobToBinaryString(msg, function(str) {\n    self._dc.send(str);\n  });\n  if (self._queue.length === 0) {\n    clearTimeout(self._timeout);\n    self._timeout = null;\n    //self._processAcks();\n  }\n};\n\n// Go through ACKs to send missing pieces.\nReliable.prototype._processAcks = function() {\n  for (var id in this._outgoing) {\n    if (this._outgoing.hasOwnProperty(id)) {\n      this._sendWindowedChunks(id);\n    }\n  }\n};\n\n// Handle sending a message.\n// FIXME: Don't wait for interval time for all messages...\nReliable.prototype._handleSend = function(msg) {\n  var push = true;\n  for (var i = 0, ii = this._queue.length; i < ii; i += 1) {\n    var item = this._queue[i];\n    if (item === msg) {\n      push = false;\n    } else if (item._multiple && item.indexOf(msg) !== -1) {\n      push = false;\n    }\n  }\n  if (push) {\n    this._queue.push(msg);\n    if (!this._timeout) {\n      this._setupInterval();\n    }\n  }\n};\n\n// Set up DataChannel handlers.\nReliable.prototype._setupDC = function() {\n  // Handle various message types.\n  var self = this;\n  this._dc.onmessage = function(e) {\n    var msg = e.data;\n    var datatype = msg.constructor;\n    // FIXME: msg is String until binary is supported.\n    // Once that happens, this will have to be smarter.\n    if (datatype === String) {\n      var ab = util.binaryStringToArrayBuffer(msg);\n      msg = util.unpack(ab);\n      self._handleMessage(msg);\n    }\n  };\n};\n\n// Handles an incoming message.\nReliable.prototype._handleMessage = function(msg) {\n  var id = msg[1];\n  var idata = this._incoming[id];\n  var odata = this._outgoing[id];\n  var data;\n  switch (msg[0]) {\n    // No chunking was done.\n    case 'no':\n      var message = id;\n      if (!!message) {\n        this.onmessage(util.unpack(message));\n      }\n      break;\n    // Reached the end of the message.\n    case 'end':\n      data = idata;\n\n      // In case end comes first.\n      this._received[id] = msg[2];\n\n      if (!data) {\n        break;\n      }\n\n      this._ack(id);\n      break;\n    case 'ack':\n      data = odata;\n      if (!!data) {\n        var ack = msg[2];\n        // Take the larger ACK, for out of order messages.\n        data.ack = Math.max(ack, data.ack);\n\n        // Clean up when all chunks are ACKed.\n        if (data.ack >= data.chunks.length) {\n          util.log('Time: ', new Date() - data.timer);\n          delete this._outgoing[id];\n        } else {\n          this._processAcks();\n        }\n      }\n      // If !data, just ignore.\n      break;\n    // Received a chunk of data.\n    case 'chunk':\n      // Create a new entry if none exists.\n      data = idata;\n      if (!data) {\n        var end = this._received[id];\n        if (end === true) {\n          break;\n        }\n        data = {\n          ack: ['ack', id, 0],\n          chunks: []\n        };\n        this._incoming[id] = data;\n      }\n\n      var n = msg[2];\n      var chunk = msg[3];\n      data.chunks[n] = new Uint8Array(chunk);\n\n      // If we get the chunk we're looking for, ACK for next missing.\n      // Otherwise, ACK the same N again.\n      if (n === data.ack[2]) {\n        this._calculateNextAck(id);\n      }\n      this._ack(id);\n      break;\n    default:\n      // Shouldn't happen, but would make sense for message to just go\n      // through as is.\n      this._handleSend(msg);\n      break;\n  }\n};\n\n// Chunks BL into smaller messages.\nReliable.prototype._chunk = function(bl) {\n  var chunks = [];\n  var size = bl.size;\n  var start = 0;\n  while (start < size) {\n    var end = Math.min(size, start + this._mtu);\n    var b = bl.slice(start, end);\n    var chunk = {\n      payload: b\n    }\n    chunks.push(chunk);\n    start = end;\n  }\n  util.log('Created', chunks.length, 'chunks.');\n  return chunks;\n};\n\n// Sends ACK N, expecting Nth blob chunk for message ID.\nReliable.prototype._ack = function(id) {\n  var ack = this._incoming[id].ack;\n\n  // if ack is the end value, then call _complete.\n  if (this._received[id] === ack[2]) {\n    this._complete(id);\n    this._received[id] = true;\n  }\n\n  this._handleSend(ack);\n};\n\n// Calculates the next ACK number, given chunks.\nReliable.prototype._calculateNextAck = function(id) {\n  var data = this._incoming[id];\n  var chunks = data.chunks;\n  for (var i = 0, ii = chunks.length; i < ii; i += 1) {\n    // This chunk is missing!!! Better ACK for it.\n    if (chunks[i] === undefined) {\n      data.ack[2] = i;\n      return;\n    }\n  }\n  data.ack[2] = chunks.length;\n};\n\n// Sends the next window of chunks.\nReliable.prototype._sendWindowedChunks = function(id) {\n  util.log('sendWindowedChunks for: ', id);\n  var data = this._outgoing[id];\n  var ch = data.chunks;\n  var chunks = [];\n  var limit = Math.min(data.ack + this._window, ch.length);\n  for (var i = data.ack; i < limit; i += 1) {\n    if (!ch[i].sent || i === data.ack) {\n      ch[i].sent = true;\n      chunks.push(['chunk', id, i, ch[i].payload]);\n    }\n  }\n  if (data.ack + this._window >= ch.length) {\n    chunks.push(['end', id, ch.length])\n  }\n  chunks._multiple = true;\n  this._handleSend(chunks);\n};\n\n// Puts together a message from chunks.\nReliable.prototype._complete = function(id) {\n  util.log('Completed called for', id);\n  var self = this;\n  var chunks = this._incoming[id].chunks;\n  var bl = new Blob(chunks);\n  util.blobToArrayBuffer(bl, function(ab) {\n    self.onmessage(util.unpack(ab));\n  });\n  delete this._incoming[id];\n};\n\n// Ups bandwidth limit on SDP. Meant to be called during offer/answer.\nReliable.higherBandwidthSDP = function(sdp) {\n  // AS stands for Application-Specific Maximum.\n  // Bandwidth number is in kilobits / sec.\n  // See RFC for more info: http://www.ietf.org/rfc/rfc2327.txt\n\n  // Chrome 31+ doesn't want us munging the SDP, so we'll let them have their\n  // way.\n  var version = navigator.appVersion.match(/Chrome\\/(.*?) /);\n  if (version) {\n    version = parseInt(version[1].split('.').shift());\n    if (version < 31) {\n      var parts = sdp.split('b=AS:30');\n      var replace = 'b=AS:102400'; // 100 Mbps\n      if (parts.length > 1) {\n        return parts[0] + replace + parts[1];\n      }\n    }\n  }\n\n  return sdp;\n};\n\n// Overwritten, typically.\nReliable.prototype.onmessage = function(msg) {};\n\nmodule.exports.Reliable = Reliable;\n",
    "deps": {
      "./util": 24
    },
    "hash": "e106e26c0ac19caf473b20317afd76e7"
  },
  "24": {
    "id": 24,
    "index": 24,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/peerjs/node_modules/reliable/lib/util.js",
    "source": "var BinaryPack = require('js-binarypack');\n\nvar util = {\n  debug: false,\n  \n  inherits: function(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  },\n  extend: function(dest, source) {\n    for(var key in source) {\n      if(source.hasOwnProperty(key)) {\n        dest[key] = source[key];\n      }\n    }\n    return dest;\n  },\n  pack: BinaryPack.pack,\n  unpack: BinaryPack.unpack,\n  \n  log: function () {\n    if (util.debug) {\n      var copy = [];\n      for (var i = 0; i < arguments.length; i++) {\n        copy[i] = arguments[i];\n      }\n      copy.unshift('Reliable: ');\n      console.log.apply(console, copy);\n    }\n  },\n\n  setZeroTimeout: (function(global) {\n    var timeouts = [];\n    var messageName = 'zero-timeout-message';\n\n    // Like setTimeout, but only takes a function argument.\t There's\n    // no time argument (always zero) and no arguments (you have to\n    // use a closure).\n    function setZeroTimeoutPostMessage(fn) {\n      timeouts.push(fn);\n      global.postMessage(messageName, '*');\n    }\t\t\n\n    function handleMessage(event) {\n      if (event.source == global && event.data == messageName) {\n        if (event.stopPropagation) {\n          event.stopPropagation();\n        }\n        if (timeouts.length) {\n          timeouts.shift()();\n        }\n      }\n    }\n    if (global.addEventListener) {\n      global.addEventListener('message', handleMessage, true);\n    } else if (global.attachEvent) {\n      global.attachEvent('onmessage', handleMessage);\n    }\n    return setZeroTimeoutPostMessage;\n  }(this)),\n  \n  blobToArrayBuffer: function(blob, cb){\n    var fr = new FileReader();\n    fr.onload = function(evt) {\n      cb(evt.target.result);\n    };\n    fr.readAsArrayBuffer(blob);\n  },\n  blobToBinaryString: function(blob, cb){\n    var fr = new FileReader();\n    fr.onload = function(evt) {\n      cb(evt.target.result);\n    };\n    fr.readAsBinaryString(blob);\n  },\n  binaryStringToArrayBuffer: function(binary) {\n    var byteArray = new Uint8Array(binary.length);\n    for (var i = 0; i < binary.length; i++) {\n      byteArray[i] = binary.charCodeAt(i) & 0xff;\n    }\n    return byteArray.buffer;\n  },\n  randomToken: function () {\n    return Math.random().toString(36).substr(2);\n  }\n};\n\nmodule.exports = util;\n",
    "deps": {
      "js-binarypack": 21
    },
    "hash": "41be8a6a69dddc68b50c25b600610d09"
  },
  "25": {
    "id": 25,
    "index": 25,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/uuid-js/lib/uuid.js",
    "source": "/*\n * UUID-js: A js library to generate and parse UUIDs, TimeUUIDs and generate\n * TimeUUID based on dates for range selections.\n * @see http://www.ietf.org/rfc/rfc4122.txt\n **/\n\nfunction UUIDjs() {\n};\n\nUUIDjs.maxFromBits = function(bits) {\n  return Math.pow(2, bits);\n};\n\nUUIDjs.limitUI04 = UUIDjs.maxFromBits(4);\nUUIDjs.limitUI06 = UUIDjs.maxFromBits(6);\nUUIDjs.limitUI08 = UUIDjs.maxFromBits(8);\nUUIDjs.limitUI12 = UUIDjs.maxFromBits(12);\nUUIDjs.limitUI14 = UUIDjs.maxFromBits(14);\nUUIDjs.limitUI16 = UUIDjs.maxFromBits(16);\nUUIDjs.limitUI32 = UUIDjs.maxFromBits(32);\nUUIDjs.limitUI40 = UUIDjs.maxFromBits(40);\nUUIDjs.limitUI48 = UUIDjs.maxFromBits(48);\n\n// Returns a random integer between min and max\n// Using Math.round() will give you a non-uniform distribution!\n// @see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math/random\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nUUIDjs.randomUI04 = function() {\n  return getRandomInt(0, UUIDjs.limitUI04-1);\n};\nUUIDjs.randomUI06 = function() {\n  return getRandomInt(0, UUIDjs.limitUI06-1);\n};\nUUIDjs.randomUI08 = function() {\n  return getRandomInt(0, UUIDjs.limitUI08-1);\n};\nUUIDjs.randomUI12 = function() {\n  return getRandomInt(0, UUIDjs.limitUI12-1);\n};\nUUIDjs.randomUI14 = function() {\n  return getRandomInt(0, UUIDjs.limitUI14-1);\n};\nUUIDjs.randomUI16 = function() {\n  return getRandomInt(0, UUIDjs.limitUI16-1);\n};\nUUIDjs.randomUI32 = function() {\n  return getRandomInt(0, UUIDjs.limitUI32-1);\n};\nUUIDjs.randomUI40 = function() {\n  return (0 | Math.random() * (1 << 30)) + (0 | Math.random() * (1 << 40 - 30)) * (1 << 30);\n};\nUUIDjs.randomUI48 = function() {\n  return (0 | Math.random() * (1 << 30)) + (0 | Math.random() * (1 << 48 - 30)) * (1 << 30);\n};\n\nUUIDjs.paddedString = function(string, length, z) {\n  string = String(string);\n  z = (!z) ? '0' : z;\n  var i = length - string.length;\n  for (; i > 0; i >>>= 1, z += z) {\n    if (i & 1) {\n      string = z + string;\n    }\n  }\n  return string;\n};\n\nUUIDjs.prototype.fromParts = function(timeLow, timeMid, timeHiAndVersion, clockSeqHiAndReserved, clockSeqLow, node) {\n  this.version = (timeHiAndVersion >> 12) & 0xF;\n  this.hex = UUIDjs.paddedString(timeLow.toString(16), 8)\n             + '-'\n             + UUIDjs.paddedString(timeMid.toString(16), 4)\n             + '-'\n             + UUIDjs.paddedString(timeHiAndVersion.toString(16), 4)\n             + '-'\n             + UUIDjs.paddedString(clockSeqHiAndReserved.toString(16), 2)\n             + UUIDjs.paddedString(clockSeqLow.toString(16), 2)\n             + '-'\n             + UUIDjs.paddedString(node.toString(16), 12);\n  return this;\n};\n\nUUIDjs.prototype.toString = function() {\n  return this.hex;\n};\nUUIDjs.prototype.toURN = function() {\n  return 'urn:uuid:' + this.hex;\n};\n\nUUIDjs.prototype.toBytes = function() {\n  var parts = this.hex.split('-');\n  var ints = [];\n  var intPos = 0;\n  for (var i = 0; i < parts.length; i++) {\n    for (var j = 0; j < parts[i].length; j+=2) {\n      ints[intPos++] = parseInt(parts[i].substr(j, 2), 16);\n    }\n  }\n  return ints;\n};\n\nUUIDjs.prototype.equals = function(uuid) {\n  if (!(uuid instanceof UUID)) {\n    return false;\n  }\n  if (this.hex !== uuid.hex) {\n    return false;\n  }\n  return true;\n};\n\nUUIDjs.getTimeFieldValues = function(time) {\n  var ts = time - Date.UTC(1582, 9, 15);\n  var hm = ((ts / 0x100000000) * 10000) & 0xFFFFFFF;\n  return { low: ((ts & 0xFFFFFFF) * 10000) % 0x100000000,\n            mid: hm & 0xFFFF, hi: hm >>> 16, timestamp: ts };\n};\n\nUUIDjs._create4 = function() {\n  return new UUIDjs().fromParts(\n    UUIDjs.randomUI32(),\n    UUIDjs.randomUI16(),\n    0x4000 | UUIDjs.randomUI12(),\n    0x80   | UUIDjs.randomUI06(),\n    UUIDjs.randomUI08(),\n    UUIDjs.randomUI48()\n  );\n};\n\nUUIDjs._create1 = function() {\n  var now = new Date().getTime();\n  var sequence = UUIDjs.randomUI14();\n  var node = (UUIDjs.randomUI08() | 1) * 0x10000000000 + UUIDjs.randomUI40();\n  var tick = UUIDjs.randomUI04();\n  var timestamp = 0;\n  var timestampRatio = 1/4;\n\n  if (now != timestamp) {\n    if (now < timestamp) {\n      sequence++;\n    }\n    timestamp = now;\n    tick = UUIDjs.randomUI04();\n  } else if (Math.random() < timestampRatio && tick < 9984) {\n    tick += 1 + UUIDjs.randomUI04();\n  } else {\n    sequence++;\n  }\n\n  var tf = UUIDjs.getTimeFieldValues(timestamp);\n  var tl = tf.low + tick;\n  var thav = (tf.hi & 0xFFF) | 0x1000;\n\n  sequence &= 0x3FFF;\n  var cshar = (sequence >>> 8) | 0x80;\n  var csl = sequence & 0xFF;\n\n  return new UUIDjs().fromParts(tl, tf.mid, thav, cshar, csl, node);\n};\n\nUUIDjs.create = function(version) {\n  version = version || 4;\n  return this['_create' + version]();\n};\n\nUUIDjs.fromTime = function(time, last) {\n  last = (!last) ? false : last;\n  var tf = UUIDjs.getTimeFieldValues(time);\n  var tl = tf.low;\n  var thav = (tf.hi & 0xFFF) | 0x1000;  // set version '0001'\n  if (last === false) {\n    return new UUIDjs().fromParts(tl, tf.mid, thav, 0, 0, 0);\n  } else {\n    return new UUIDjs().fromParts(tl, tf.mid, thav, 0x80 | UUIDjs.limitUI06, UUIDjs.limitUI08 - 1, UUIDjs.limitUI48 - 1);\n  }\n};\n\nUUIDjs.firstFromTime = function(time) {\n  return UUIDjs.fromTime(time, false);\n};\nUUIDjs.lastFromTime = function(time) {\n  return UUIDjs.fromTime(time, true);\n};\n\nUUIDjs.fromURN = function(strId) {\n  var r, p = /^(?:urn:uuid:|\\{)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{12})(?:\\})?$/i;\n  if ((r = p.exec(strId))) {\n    return new UUIDjs().fromParts(parseInt(r[1], 16), parseInt(r[2], 16),\n                            parseInt(r[3], 16), parseInt(r[4], 16),\n                            parseInt(r[5], 16), parseInt(r[6], 16));\n  }\n  return null;\n};\n\nUUIDjs.fromBytes = function(ints) {\n  if (ints.length < 5) {\n    return null;\n  }\n  var str = '';\n  var pos = 0;\n  var parts = [4, 2, 2, 2, 6];\n  for (var i = 0; i < parts.length; i++) {\n    for (var j = 0; j < parts[i]; j++) {\n      var octet = ints[pos++].toString(16);\n      if (octet.length == 1) {\n        octet = '0' + octet;\n      }\n      str += octet;\n    }\n    if (parts[i] !== 6) {\n      str += '-';\n    }\n  }\n  return UUIDjs.fromURN(str);\n};\n\nUUIDjs.fromBinary = function(binary) {\n  var ints = [];\n  for (var i = 0; i < binary.length; i++) {\n    ints[i] = binary.charCodeAt(i);\n    if (ints[i] > 255 || ints[i] < 0) {\n      throw new Error('Unexpected byte in binary data.');\n    }\n  }\n  return UUIDjs.fromBytes(ints);\n};\n\n// Aliases to support legacy code. Do not use these when writing new code as\n// they may be removed in future versions!\nUUIDjs.new = function() {\n  return this.create(4);\n};\nUUIDjs.newTS = function() {\n  return this.create(1);\n};\n\nmodule.exports = UUIDjs;\n",
    "deps": {},
    "hash": "c021d4ef2092a91f1d13059ba105ee46"
  },
  "26": {
    "id": 26,
    "index": 26,
    "file": "/Users/tmpethick/Business/Projects/turtlespace/node_modules/yocto/src/yocto.js",
    "source": "/*jshint browser:true, strict:true es5:true*/\n// yocto.js 0.0.1 - (c) 2012 Trygve Lie - MIT license.\n\n\n// # Internals\n//\n//\n// ## - Object storage and object structure\n//\n// All objects is stored in _one_ array which is only allowed to contain objects. Upon insertion\n// into the array all non object types is declined by a filter method.\n//\n// There is no restrictions on the structure of the objects stored in the array so the array can\n// hold a wide range of different objects. This does not affect the matching process.\n//\n// The matching process is done by comparing object keys and values in a template object and each\n// object in the array. This matching process does only a shallow match. Deeply nested object\n// values will not be compared. Though, doing a deep object structure match can be done by the\n// user by providing a dedicated function to a template key to do the match.\n// Doing a deep object structure match would probably be overkill for most usecases of yocto so\n// doing so is delibertly handed over to the user to implement here/him self.\n//\n//\n// ## - Chaining and function composition\n//\n// The public API can be chained and the chain is terminated by a callback to a, preferly the\n// last, method in the chain.\n// Since all objects are stored in an array retreiving the requested arrays will involve looping\n// over all objects to match those whit a template. The result of such a request will be a new\n// list with the matching objects which the user possible would like to do something upon each\n// object. This is a possible double loop.\n//\n// To reduce possible double loops, functions are upon chaining composed into one function which\n// will run inside _one_ loop upon termination of a chain.\n//\n// When composing function one parameter is sendt as function parameter to a function and then\n// returned again. The returned value will then be passed on as function paramter to the next\n// function in the composition.\n//\n// In yocto we pass one object which looks like this through to all composed functions:\n// {\n//    objects     : [],\n//    object      : undefined,\n//    result      : [],\n//    index       : 0,\n//    template    : {},\n//    match       : true,\n//    onEach      : undefined\n// }\n//\n// Each function in the composition can then manipulate this object before its passed on to the\n// next function.\n\n\n(function(exports){\n\n    \"use strict\";\n\n\n    function Yocto(options) {\n\n        var config      = {\n                name : 'yocto'\n            },\n\n            observers   = [],\n\n            chain       = [],\n\n            core        = {\n                objects         : [],\n                uuids           : {},\n                updated         : -1,\n\n                template        : {},\n                doHashLookup    : false,\n\n                object          : undefined,\n                index           : 0,\n                match           : false,\n                onEach          : undefined,\n\n                result          : [],\n                onEnd           : undefined\n            };\n\n\n\n        // Environment checks\n\n        var has = {\n            storage : supportsLocalStorage()\n        };\n\n\n\n        // Convenient \"is\" checks\n        // These checks is also passed on to any functions in a template\n\n        var is = {\n            arr     : function(value) {return value instanceof Array;},\n            obj     : function(value) {return value instanceof Object;},\n            fn      : function(value) {return typeof value === 'function';},\n            str     : function(value) {return typeof value === 'string';},\n            num     : function(value) {return typeof value === 'number';},\n            empty   : function(obj) {\n                if (obj === null) {return true;}\n                if (is.arr(obj) || is.str(obj)) {return obj.length === 0;}\n                if (is.obj(obj)) {return Object.keys(obj).length === 0;}\n                return true;\n            }\n        };\n\n\n\n        // Is localstorage supported in the run time\n\n        function supportsLocalStorage() {\n            var tmp = '__ytest';\n            try {\n                localStorage.setItem(tmp,tmp);\n                localStorage.removeItem(tmp);\n                return true;\n            } catch(e) {\n                return false;\n            }\n        }\n\n\n\n        // Reset additional properties on the core object\n\n        function reset(coreObj) {\n            coreObj.template        = {};\n            coreObj.doHashLookup    = false;\n\n            coreObj.object          = undefined;\n            coreObj.index           = 0;\n            coreObj.match           = false;\n            coreObj.onEach          = undefined;\n\n            coreObj.result          = [];\n            coreObj.onEnd           = undefined;\n        }\n\n\n\n        // Compose an array of composition functions into one function\n\n        function compose() {\n\n            var funcs = arguments;\n\n            return function() {\n                var i       = 0,\n                    l       = funcs.length,\n                    args    = arguments;\n\n                for (i = 0; i < l; i += 1) {\n                    args = [funcs[i].apply(this, args)];\n                }\n\n                return args[0];\n            };\n\n        }\n\n\n        // Composition function for matching an object with a template based on key matching\n\n        function keysMatch(coreObj) {\n            coreObj.match = Object.keys(coreObj.template).every(function(key) {\n                if (is.fn(coreObj.template[key])) {\n                    return coreObj.template[key].call(this, coreObj.object[key], is);\n\n                } else {\n                    return coreObj.object[key] === coreObj.template[key];\n\n                }\n            });\n            return coreObj;\n        }\n\n\n        // Composition function for removing an object from the storage array\n\n        function arrayRemove(coreObj) {\n            if (coreObj.match) {\n                coreObj.object = coreObj.objects.splice(coreObj.index, 1)[0];\n                coreObj.index--;\n            }\n\n            // Autosave all objects to localstorage\n            if (is.obj(config.autosave)) {\n                save(config.autosave, coreObj.objects);\n            }\n\n            return coreObj;\n        }\n\n\n        // Remove an object from the object hash\n\n        function hashRemove(coreObj) {\n            var key = coreObj.template[config.uuid];\n            delete coreObj.uuids[key];\n            return coreObj;\n        }\n\n\n        // Append an object to the object hash\n\n        function hashAppend(conf, obj, coreObj) {\n            if (conf.uuid) {\n                coreObj.uuids[obj[conf.uuid]] = obj;\n            }\n            return coreObj;\n        }\n\n\n        // Composition function for executing onEach callback\n\n        function doOnEach(coreObj) {\n            if (coreObj.match) {\n                coreObj.onEach.call(null, coreObj.object);\n            }\n            return coreObj;\n        }\n\n\n        // Look up objects in the object array\n        // Takes the array of composition functions and runs the composed function in one loop\n\n        function arrayLookup(coreObj, chainArr) {\n\n            var composedFunction    = compose.apply(null, chainArr),\n                runOnResult         = (coreObj.result.length !== 0) || false,\n                objs                = runOnResult ? coreObj.result : coreObj.objects,\n                result              = [],\n                l                   = objs.length;\n\n            for (coreObj.index = 0; coreObj.index < l; coreObj.index += 1) {\n                coreObj.object   = objs[coreObj.index];\n\n                composedFunction(coreObj);\n\n                if (coreObj.match) {\n\n                    // When taking objects out of the tuple we need to compensate for\n                    // the objects taken out to prevent out of bound error.\n                    // This compensation should only be done on the tuple object array.\n                    if (!runOnResult && l != objs.length) {\n                        l = objs.length;\n                    }\n\n                    result.push(coreObj.object);\n                }\n            }\n\n            coreObj.result = result;\n\n            if (coreObj.onEnd) {\n                coreObj.onEnd.call(null, coreObj.result);\n            }\n\n            return coreObj;\n        }\n\n\n        // Look up an object in the uuid hash\n\n        function hashLookup(coreObj, chainArr) {\n\n            var composedFunction    = compose.apply(null, chainArr),\n                uuid                = coreObj.template[config.uuid];\n\n            coreObj.object = coreObj.uuids[uuid] ? coreObj.uuids[uuid] : {};\n            composedFunction(coreObj);\n\n            if (coreObj.match) {\n                coreObj.result.push(coreObj.object);\n            }\n\n            if (coreObj.onEnd) {\n                coreObj.onEnd.call(null, coreObj.result);\n            }\n\n            return coreObj;\n        }\n\n\n        // Switch between looking up in the object array or object hash\n\n        function lookup(coreObj, chainArr) {\n            if (config.uuid && coreObj.template[config.uuid] && coreObj.doHashLookup) {\n                return hashLookup(coreObj, chainArr);\n            } else {\n                return arrayLookup(coreObj, chainArr);\n            }\n        }\n\n\n        // Set storage type to use base on a config object\n\n        function setStorageType(conf) {\n            if (conf && conf.type === 'session') {\n                return 'sessionStorage';\n            } else {\n                return 'localStorage';\n            }\n        }\n\n\n        // Save objects to localstorage\n\n        function save(conf, objs) {\n            var type = setStorageType(conf);\n\n            if (conf && is.str(conf.name) && has.storage) {\n                window[type].setItem(conf.name, JSON.stringify({\n                    creator     : conf.name,\n                    timestamp   : +new Date(),\n                    objects     : objs\n                }));\n            }\n        }\n\n\n        // Append a timestamp to an object\n\n        function setTimestamp(conf, obj, coreObj) {\n            if (conf.timestamp && !obj[conf.timestamp]) {\n                obj[conf.timestamp] = coreObj.updated;\n            }\n        }\n\n\n        function observerMatch(ev, objs) {\n            var i = 0,\n                l = objs.length,\n                w = 0;\n\n            function match(template, obj){\n                return Object.keys(template).every(function(key) {\n                    if (is.fn(template[key])) {\n                        return template[key].call(this, obj[key], is);\n                    } else {\n                        return obj[key] === template[key];\n                    }\n                });\n            }\n\n            for (i = 0; i < l; i += 1) {\n                w = observers.length;\n                while(w--) {\n                    if (match(observers[w].template, objs[i])) {\n                        observers[w].fn.call(null, ev, objs[i]);\n                    }\n                }\n            }\n        }\n\n\n        // Get the highest number of a key in an array\n\n        function getHighestNumber(arr, key) {\n            return Math.max.apply(Math, arr.map(function(obj){\n                return obj[key];\n            }));\n        }\n\n\n        // Set config - Do not allow override of \"name\"\n\n        if (is.obj(options) && is.obj(config)) {\n            Object.keys(options).every(function(key){\n                if (key !== 'name') {\n                    config[key] = options[key];\n                }\n                return true;\n            });\n        }\n\n\n\n        // Public methods\n\n        return {\n\n            // Put a single object or an array of objects into the database\n\n            put : function(obj, onSuccess) {\n\n                var i   = 0,\n                    l   = 0;\n\n                core.match = true;\n                core.updated = +new Date();\n\n                // Array of objects applied\n                if (is.arr(obj)) {\n\n                    // Filter out non object entries.\n                    obj = obj.filter(function(element){\n                        return (is.obj(element) && !is.arr(element));\n                    });\n\n                    if (config.uuid || config.timestamp) {\n                        l = obj.length;\n                        for (i = 0; i < l; i += 1) {\n                            setTimestamp(config, obj[i], core);\n                            hashAppend(config, obj[i], core);\n                        }\n                    }\n\n                    core.objects    = core.objects.concat(obj);\n                    core.result     = core.result.concat(obj);\n                }\n\n                // Single object applied\n                if (is.obj(obj) && !is.arr(obj)) {\n                    setTimestamp(config, obj, core);\n                    hashAppend(config, obj, core);\n\n                    core.objects.push(obj);\n                    core.result.push(obj);\n                }\n\n                // Autosave all objects to localstorage\n                if (is.obj(config.autosave)) {\n                    save(config.autosave, core.objects);\n                }\n\n                // Run the result trough the observers\n                observerMatch('put', core.result);\n\n                if (onSuccess && is.fn(onSuccess)) {\n                    onSuccess.call(this, core.result);\n                    reset(core);\n                    chain = [];\n                }\n\n                return this;\n            },\n\n\n            // Get object(s) from the database based on a template object\n\n            get : function(template, onSuccess) {\n                core.template       = template || {};\n                core.doHashLookup   = true;\n\n                chain.push(keysMatch);\n\n                core.onEnd = onSuccess;\n\n                if (onSuccess && is.fn(onSuccess)) {\n                    lookup(core, chain);\n                    reset(core);\n                    chain = [];\n                }\n\n                return this;\n            },\n\n\n            // Takes matching objects out of the database\n\n            take : function(template, onSuccess) {\n                core.template = template || {};\n                chain.push(keysMatch);\n                chain.push(arrayRemove);\n                chain.push(hashRemove);\n\n                core.onEnd = function(result){\n                    if(onSuccess && is.fn(onSuccess)) {\n                        onSuccess(result);\n                    }\n\n                    // Run the result trough the observers\n                    observerMatch('take', result);\n                };\n\n                if (onSuccess && is.fn(onSuccess)) {\n                    lookup(core, chain);\n                    reset(core);\n                    chain = [];\n                }\n\n                return this;\n            },\n\n\n            // Loop over each object in a returned list of objects\n\n            each : function(onEach) {\n                chain.push(doOnEach);\n\n                core.onEach = onEach;\n\n                if (onEach && is.fn(onEach)) {\n                    lookup(core, chain);\n                    reset(core);\n                    chain = [];\n                }\n\n                return this;\n            },\n\n\n            // Drop all database records in memory.\n\n            drop : function(onSuccess) {\n                core.objects.splice(0, core.objects.length);\n                core.uuids = {};\n\n                if (onSuccess && is.fn(onSuccess)) {\n                    onSuccess.call(null);\n                    reset(core);\n                    chain = [];\n                }\n                return this;\n            },\n\n\n            // Drop all database records in memory and in localStorage.\n            // Takes the following object as configuration:\n            // {\n            //     type : 'local' || 'session'\n            //     name : ''\n            // }\n\n            destroy : function(conf, onSuccess) {\n                var type    = setStorageType(conf);\n\n                if (conf && is.str(conf.name) && has.storage) {\n                    window[type].removeItem(conf.name);\n                }\n\n                this.drop(onSuccess);\n\n                return this;\n            },\n\n\n            // Sort a returned list of objects based on a objects property name\n\n            sort : function(key, onSuccess) {\n\n                core.onEnd = function(){\n                    core.result = core.result.sort(function sortByObjectKey(object1, object2) {\n                        var key1 = '',\n                            key2 = '';\n\n                        if (is.obj(object1) && is.obj(object2) && object1 && object2) {\n                            key1 = object1[key];\n                            key2 = object2[key];\n                            if (key1 === key2) {\n                                return object1;\n                            }\n                            if (typeof key1 === typeof key2) {\n                                return key1 < key2 ? -1 : 1;\n                            }\n                        }\n                    });\n                };\n\n                lookup(core, chain);\n\n                if (onSuccess && is.fn(onSuccess)) {\n                    onSuccess.call(null, core.result);\n                    reset(core);\n                    chain = [];\n                }\n\n                return this;\n            },\n\n\n            // Save a list of records to localstorage\n            // Takes the following object as configuration:\n            // {\n            //     type : 'local' || 'session'\n            //     name : ''\n            // }\n\n            save : function(conf, onSuccess) {\n\n                core.onEnd = function(){\n                    save(conf, core.result);\n\n                    if (onSuccess && is.fn(onSuccess)) {\n                        onSuccess.call(null, core.result);\n                    }\n                };\n\n                if (onSuccess && is.fn(onSuccess)) {\n                    lookup(core, chain);\n                    reset(core);\n                    chain = [];\n                }\n\n                return this;\n            },\n\n\n            // Load a list of records from localstorage\n            // Takes the following object as configuration:\n            // {\n            //     type : 'local' || 'session'\n            //     name : ''\n            // }\n\n            load : function(conf, onLoaded) {\n\n                var type        = setStorageType(conf),\n                    loadedData  = '',\n                    parsedData  = {};\n\n                if (conf && is.str(conf.name) && has.storage) {\n                    loadedData = window[type].getItem(conf.name);\n                    parsedData = JSON.parse(loadedData);\n                }\n\n                this.put(is.empty(parsedData) ? [] : parsedData.objects, onLoaded);\n\n                return this;\n            },\n\n\n            observe : function(template, onMatch){\n                observers.push({\n                    template : template,\n                    fn : onMatch\n                });\n                return this;\n            },\n\n\n            unobserve : function(template) {\n                var i = observers.length;\n                while(i--) {\n                    if (observers[i].template === template) {\n                        observers.splice(i,1);\n                    }\n                }\n                return this;\n            },\n\n\n            // Returns misc status information about the database\n\n            status : function(onSuccess) {\n                onSuccess.call(null, {\n                    count   : core.objects.length,\n                    updated : core.updated,\n                    latest  : config.timestamp ? getHighestNumber(core.objects, config.timestamp) : -1\n                });\n\n                return this;\n            }\n\n        };\n\n    }\n\n\n    exports.db = function createYocto(options) {\n        return new Yocto(options);\n    };\n\n\n})(typeof exports === 'undefined' ? this.yocto = {}: exports);",
    "deps": {},
    "hash": "4af5806c220af43ffebb17883768ae4f"
  }
}, 3);